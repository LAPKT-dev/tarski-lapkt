# Generated from ./grammars/fstrips.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0095")
        buf.write("\u0498\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\3\2\3\2\5\2\u00c3\n\2\3\3\3\3\3\3\3\3\5\3\u00c9")
        buf.write("\n\3\3\3\5\3\u00cc\n\3\3\3\5\3\u00cf\n\3\3\3\5\3\u00d2")
        buf.write("\n\3\3\3\5\3\u00d5\n\3\3\3\5\3\u00d8\n\3\3\3\7\3\u00db")
        buf.write("\n\3\f\3\16\3\u00de\13\3\3\3\3\3\3\4\3\4\3\4\7\4\u00e5")
        buf.write("\n\4\f\4\16\4\u00e8\13\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\6\3\6\3\6\6\6\u00f4\n\6\r\6\16\6\u00f5\3\6\3\6\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\b\3\b\3\b\5\b\u0102\n\b\3\t\3\t\5\t\u0106")
        buf.write("\n\t\3\n\7\n\u0109\n\n\f\n\16\n\u010c\13\n\3\13\3\13\6")
        buf.write("\13\u0110\n\13\r\13\16\13\u0111\3\13\3\13\5\13\u0116\n")
        buf.write("\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\6\r\u0120\n\r\r\r")
        buf.write("\16\r\u0121\3\r\3\r\3\r\5\r\u0127\n\r\3\16\3\16\5\16\u012b")
        buf.write("\n\16\3\17\3\17\3\17\7\17\u0130\n\17\f\17\16\17\u0133")
        buf.write("\13\17\3\17\3\17\3\20\6\20\u0138\n\20\r\20\16\20\u0139")
        buf.write("\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\24\3\24\3\24\7\24\u014e\n\24\f")
        buf.write("\24\16\24\u0151\13\24\3\24\3\24\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\26\3\26\3\27\7\27\u015d\n\27\f\27\16\27\u0160\13")
        buf.write("\27\3\27\6\27\u0163\n\27\r\27\16\27\u0164\3\27\7\27\u0168")
        buf.write("\n\27\f\27\16\27\u016b\13\27\5\27\u016d\n\27\3\30\6\30")
        buf.write("\u0170\n\30\r\30\16\30\u0171\3\30\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u017d\n\31\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3\37")
        buf.write("\3\37\3 \3 \3 \3 \3 \3!\3!\3!\5!\u01ac\n!\3\"\3\"\3\"")
        buf.write("\3\"\7\"\u01b2\n\"\f\"\16\"\u01b5\13\"\3\"\3\"\3\"\3\"")
        buf.write("\7\"\u01bb\n\"\f\"\16\"\u01be\13\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u01de")
        buf.write("\n\"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3%\7%\u01ef")
        buf.write("\n%\f%\16%\u01f2\13%\3%\3%\3&\3&\3&\3&\3&\5&\u01fb\n&")
        buf.write("\3\'\3\'\3\'\7\'\u0200\n\'\f\'\16\'\u0203\13\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0212")
        buf.write("\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3*\3")
        buf.write("*\3*\7*\u0226\n*\f*\16*\u0229\13*\3*\3*\5*\u022d\n*\3")
        buf.write("+\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\5,\u0248\n,\3-\3-\3-\3-\3-\3-\5-\u0250")
        buf.write("\n-\3-\3-\3-\3-\5-\u0256\n-\5-\u0258\n-\3.\3.\3.\3.\7")
        buf.write(".\u025e\n.\f.\16.\u0261\13.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\5.\u026c\n.\3/\3/\3/\3/\5/\u0272\n/\3/\3/\3/\5/\u0277")
        buf.write("\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\5\60\u0285\n\60\3\61\3\61\3\62\3\62\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\64\3\64\3\64\5\64\u0294\n\64")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\5\65\u02a5\n\65\3\66\3\66\3\66\3")
        buf.write("\66\3\66\5\66\u02ac\n\66\3\67\3\67\3\67\3\67\5\67\u02b2")
        buf.write("\n\67\38\38\38\38\58\u02b8\n8\39\39\39\79\u02bd\n9\f9")
        buf.write("\169\u02c0\139\39\39\3:\3:\3:\7:\u02c7\n:\f:\16:\u02ca")
        buf.write("\13:\3:\3:\5:\u02ce\n:\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\7;\u02e4\n;\f;\16;\u02e7")
        buf.write("\13;\3;\3;\3;\3;\5;\u02ed\n;\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u0301\n<\3=\3=\3>\3>\3")
        buf.write("?\3?\3@\3@\3A\3A\3B\3B\3C\3C\3C\6C\u0312\nC\rC\16C\u0313")
        buf.write("\3C\3C\3C\3C\3C\5C\u031b\nC\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\5D\u0329\nD\3E\3E\3F\3F\5F\u032f\nF\3G\3G\3")
        buf.write("G\7G\u0334\nG\fG\16G\u0337\13G\3G\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u034f\n")
        buf.write("G\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\5H\u0363\nH\3I\3I\3I\3I\3I\3I\3J\3J\3J\3J\3J\3J\3J\5")
        buf.write("J\u0372\nJ\3J\3J\3J\3J\5J\u0378\nJ\3K\3K\3K\3K\3K\5K\u037f")
        buf.write("\nK\3K\5K\u0382\nK\3K\3K\3K\7K\u0387\nK\fK\16K\u038a\13")
        buf.write("K\3K\3K\3L\3L\3L\5L\u0391\nL\3M\3M\3M\3M\3M\3N\3N\3N\3")
        buf.write("N\3N\3O\3O\3O\3O\3O\3P\3P\3P\6P\u03a5\nP\rP\16P\u03a6")
        buf.write("\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3R\3R\3R\7R\u03b9")
        buf.write("\nR\fR\16R\u03bc\13R\3R\3R\3S\3S\3S\5S\u03c3\nS\3T\3T")
        buf.write("\3T\7T\u03c8\nT\fT\16T\u03cb\13T\3T\3T\3U\3U\3U\3U\3U")
        buf.write("\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u03e2\n")
        buf.write("U\3V\3V\3V\3V\3V\3V\5V\u03ea\nV\3W\3W\3W\7W\u03ef\nW\f")
        buf.write("W\16W\u03f2\13W\3W\3W\3X\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Z\3Z\3Z\7Z\u0403\nZ\fZ\16Z\u0406\13Z\3Z\3Z\3Z\3Z\3Z\3")
        buf.write("Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0414\nZ\3Z\3Z\3Z\3Z\6Z\u041a\n")
        buf.write("Z\rZ\16Z\u041b\5Z\u041e\nZ\3[\3[\3[\3[\3[\3[\3\\\3\\\3")
        buf.write("]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\5]\u0434\n]\3^\3^\3")
        buf.write("^\3^\3^\3_\3_\3_\3_\3_\3`\3`\3`\6`\u0443\n`\r`\16`\u0444")
        buf.write("\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3")
        buf.write("`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3")
        buf.write("`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3")
        buf.write("`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3")
        buf.write("`\6`\u048f\n`\r`\16`\u0490\3`\3`\3`\5`\u0496\n`\3`\2\2")
        buf.write("a\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\2\f\3\2^_\3\2&\'\5\2\16\16**-\61\4")
        buf.write("\2\16\16\62:\4\2**--\4\2\36\36;>\4\2,,?B\3\2AB\4\2\36")
        buf.write("\36=>\3\2NO\2\u04c0\2\u00c2\3\2\2\2\4\u00c4\3\2\2\2\6")
        buf.write("\u00e1\3\2\2\2\b\u00eb\3\2\2\2\n\u00f0\3\2\2\2\f\u00f9")
        buf.write("\3\2\2\2\16\u0101\3\2\2\2\20\u0105\3\2\2\2\22\u010a\3")
        buf.write("\2\2\2\24\u0115\3\2\2\2\26\u0117\3\2\2\2\30\u0126\3\2")
        buf.write("\2\2\32\u012a\3\2\2\2\34\u012c\3\2\2\2\36\u0137\3\2\2")
        buf.write("\2 \u013e\3\2\2\2\"\u0143\3\2\2\2$\u0145\3\2\2\2&\u014a")
        buf.write("\3\2\2\2(\u0154\3\2\2\2*\u0159\3\2\2\2,\u016c\3\2\2\2")
        buf.write(".\u016f\3\2\2\2\60\u017c\3\2\2\2\62\u017e\3\2\2\2\64\u0188")
        buf.write("\3\2\2\2\66\u0193\3\2\2\28\u019d\3\2\2\2:\u019f\3\2\2")
        buf.write("\2<\u01a1\3\2\2\2>\u01a3\3\2\2\2@\u01ab\3\2\2\2B\u01dd")
        buf.write("\3\2\2\2D\u01df\3\2\2\2F\u01e5\3\2\2\2H\u01eb\3\2\2\2")
        buf.write("J\u01fa\3\2\2\2L\u0211\3\2\2\2N\u0213\3\2\2\2P\u021d\3")
        buf.write("\2\2\2R\u022c\3\2\2\2T\u022e\3\2\2\2V\u0247\3\2\2\2X\u0257")
        buf.write("\3\2\2\2Z\u026b\3\2\2\2\\\u0276\3\2\2\2^\u0284\3\2\2\2")
        buf.write("`\u0286\3\2\2\2b\u0288\3\2\2\2d\u028a\3\2\2\2f\u0293\3")
        buf.write("\2\2\2h\u02a4\3\2\2\2j\u02ab\3\2\2\2l\u02b1\3\2\2\2n\u02b7")
        buf.write("\3\2\2\2p\u02b9\3\2\2\2r\u02cd\3\2\2\2t\u02ec\3\2\2\2")
        buf.write("v\u0300\3\2\2\2x\u0302\3\2\2\2z\u0304\3\2\2\2|\u0306\3")
        buf.write("\2\2\2~\u0308\3\2\2\2\u0080\u030a\3\2\2\2\u0082\u030c")
        buf.write("\3\2\2\2\u0084\u031a\3\2\2\2\u0086\u0328\3\2\2\2\u0088")
        buf.write("\u032a\3\2\2\2\u008a\u032e\3\2\2\2\u008c\u034e\3\2\2\2")
        buf.write("\u008e\u0362\3\2\2\2\u0090\u0364\3\2\2\2\u0092\u0377\3")
        buf.write("\2\2\2\u0094\u0379\3\2\2\2\u0096\u0390\3\2\2\2\u0098\u0392")
        buf.write("\3\2\2\2\u009a\u0397\3\2\2\2\u009c\u039c\3\2\2\2\u009e")
        buf.write("\u03a1\3\2\2\2\u00a0\u03aa\3\2\2\2\u00a2\u03b5\3\2\2\2")
        buf.write("\u00a4\u03c2\3\2\2\2\u00a6\u03c4\3\2\2\2\u00a8\u03e1\3")
        buf.write("\2\2\2\u00aa\u03e9\3\2\2\2\u00ac\u03eb\3\2\2\2\u00ae\u03f5")
        buf.write("\3\2\2\2\u00b0\u03fa\3\2\2\2\u00b2\u041d\3\2\2\2\u00b4")
        buf.write("\u041f\3\2\2\2\u00b6\u0425\3\2\2\2\u00b8\u0433\3\2\2\2")
        buf.write("\u00ba\u0435\3\2\2\2\u00bc\u043a\3\2\2\2\u00be\u0495\3")
        buf.write("\2\2\2\u00c0\u00c3\5\4\3\2\u00c1\u00c3\5\u0094K\2\u00c2")
        buf.write("\u00c0\3\2\2\2\u00c2\u00c1\3\2\2\2\u00c3\3\3\2\2\2\u00c4")
        buf.write("\u00c5\7\3\2\2\u00c5\u00c6\7\4\2\2\u00c6\u00c8\5\b\5\2")
        buf.write("\u00c7\u00c9\5\n\6\2\u00c8\u00c7\3\2\2\2\u00c8\u00c9\3")
        buf.write("\2\2\2\u00c9\u00cb\3\2\2\2\u00ca\u00cc\5\f\7\2\u00cb\u00ca")
        buf.write("\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc\u00ce\3\2\2\2\u00cd")
        buf.write("\u00cf\5$\23\2\u00ce\u00cd\3\2\2\2\u00ce\u00cf\3\2\2\2")
        buf.write("\u00cf\u00d1\3\2\2\2\u00d0\u00d2\5&\24\2\u00d1\u00d0\3")
        buf.write("\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d4\3\2\2\2\u00d3\u00d5")
        buf.write("\5\34\17\2\u00d4\u00d3\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5")
        buf.write("\u00d7\3\2\2\2\u00d6\u00d8\5\6\4\2\u00d7\u00d6\3\2\2\2")
        buf.write("\u00d7\u00d8\3\2\2\2\u00d8\u00dc\3\2\2\2\u00d9\u00db\5")
        buf.write("\60\31\2\u00da\u00d9\3\2\2\2\u00db\u00de\3\2\2\2\u00dc")
        buf.write("\u00da\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00df\3\2\2\2")
        buf.write("\u00de\u00dc\3\2\2\2\u00df\u00e0\7\5\2\2\u00e0\5\3\2\2")
        buf.write("\2\u00e1\u00e2\7\3\2\2\u00e2\u00e6\7\6\2\2\u00e3\u00e5")
        buf.write("\5\36\20\2\u00e4\u00e3\3\2\2\2\u00e5\u00e8\3\2\2\2\u00e6")
        buf.write("\u00e4\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e9\3\2\2\2")
        buf.write("\u00e8\u00e6\3\2\2\2\u00e9\u00ea\7\5\2\2\u00ea\7\3\2\2")
        buf.write("\2\u00eb\u00ec\7\3\2\2\u00ec\u00ed\7\7\2\2\u00ed\u00ee")
        buf.write("\7^\2\2\u00ee\u00ef\7\5\2\2\u00ef\t\3\2\2\2\u00f0\u00f1")
        buf.write("\7\3\2\2\u00f1\u00f3\7\b\2\2\u00f2\u00f4\7]\2\2\u00f3")
        buf.write("\u00f2\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f3\3\2\2\2")
        buf.write("\u00f5\u00f6\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\u00f8\7")
        buf.write("\5\2\2\u00f8\13\3\2\2\2\u00f9\u00fa\7\3\2\2\u00fa\u00fb")
        buf.write("\7\t\2\2\u00fb\u00fc\5\24\13\2\u00fc\u00fd\7\5\2\2\u00fd")
        buf.write("\r\3\2\2\2\u00fe\u0102\7\n\2\2\u00ff\u0102\7\13\2\2\u0100")
        buf.write("\u0102\7\f\2\2\u0101\u00fe\3\2\2\2\u0101\u00ff\3\2\2\2")
        buf.write("\u0101\u0100\3\2\2\2\u0102\17\3\2\2\2\u0103\u0106\5\16")
        buf.write("\b\2\u0104\u0106\7\r\2\2\u0105\u0103\3\2\2\2\u0105\u0104")
        buf.write("\3\2\2\2\u0106\21\3\2\2\2\u0107\u0109\7^\2\2\u0108\u0107")
        buf.write("\3\2\2\2\u0109\u010c\3\2\2\2\u010a\u0108\3\2\2\2\u010a")
        buf.write("\u010b\3\2\2\2\u010b\23\3\2\2\2\u010c\u010a\3\2\2\2\u010d")
        buf.write("\u0116\5\22\n\2\u010e\u0110\5\26\f\2\u010f\u010e\3\2\2")
        buf.write("\2\u0110\u0111\3\2\2\2\u0111\u010f\3\2\2\2\u0111\u0112")
        buf.write("\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0114\5\22\n\2\u0114")
        buf.write("\u0116\3\2\2\2\u0115\u010d\3\2\2\2\u0115\u010f\3\2\2\2")
        buf.write("\u0116\25\3\2\2\2\u0117\u0118\7^\2\2\u0118\u0119\5\22")
        buf.write("\n\2\u0119\u011a\7\16\2\2\u011a\u011b\5\30\r\2\u011b\27")
        buf.write("\3\2\2\2\u011c\u011d\7\3\2\2\u011d\u011f\7\17\2\2\u011e")
        buf.write("\u0120\5\32\16\2\u011f\u011e\3\2\2\2\u0120\u0121\3\2\2")
        buf.write("\2\u0121\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0123")
        buf.write("\3\2\2\2\u0123\u0124\7\5\2\2\u0124\u0127\3\2\2\2\u0125")
        buf.write("\u0127\5\32\16\2\u0126\u011c\3\2\2\2\u0126\u0125\3\2\2")
        buf.write("\2\u0127\31\3\2\2\2\u0128\u012b\7^\2\2\u0129\u012b\5\20")
        buf.write("\t\2\u012a\u0128\3\2\2\2\u012a\u0129\3\2\2\2\u012b\33")
        buf.write("\3\2\2\2\u012c\u012d\7\3\2\2\u012d\u0131\7\20\2\2\u012e")
        buf.write("\u0130\5\36\20\2\u012f\u012e\3\2\2\2\u0130\u0133\3\2\2")
        buf.write("\2\u0131\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0134")
        buf.write("\3\2\2\2\u0133\u0131\3\2\2\2\u0134\u0135\7\5\2\2\u0135")
        buf.write("\35\3\2\2\2\u0136\u0138\5 \21\2\u0137\u0136\3\2\2\2\u0138")
        buf.write("\u0139\3\2\2\2\u0139\u0137\3\2\2\2\u0139\u013a\3\2\2\2")
        buf.write("\u013a\u013b\3\2\2\2\u013b\u013c\7\16\2\2\u013c\u013d")
        buf.write("\5\32\16\2\u013d\37\3\2\2\2\u013e\u013f\7\3\2\2\u013f")
        buf.write("\u0140\5\"\22\2\u0140\u0141\5,\27\2\u0141\u0142\7\5\2")
        buf.write("\2\u0142!\3\2\2\2\u0143\u0144\t\2\2\2\u0144#\3\2\2\2\u0145")
        buf.write("\u0146\7\3\2\2\u0146\u0147\7\21\2\2\u0147\u0148\5\24\13")
        buf.write("\2\u0148\u0149\7\5\2\2\u0149%\3\2\2\2\u014a\u014b\7\3")
        buf.write("\2\2\u014b\u014f\7\22\2\2\u014c\u014e\5(\25\2\u014d\u014c")
        buf.write("\3\2\2\2\u014e\u0151\3\2\2\2\u014f\u014d\3\2\2\2\u014f")
        buf.write("\u0150\3\2\2\2\u0150\u0152\3\2\2\2\u0151\u014f\3\2\2\2")
        buf.write("\u0152\u0153\7\5\2\2\u0153\'\3\2\2\2\u0154\u0155\7\3\2")
        buf.write("\2\u0155\u0156\5*\26\2\u0156\u0157\5,\27\2\u0157\u0158")
        buf.write("\7\5\2\2\u0158)\3\2\2\2\u0159\u015a\7^\2\2\u015a+\3\2")
        buf.write("\2\2\u015b\u015d\7`\2\2\u015c\u015b\3\2\2\2\u015d\u0160")
        buf.write("\3\2\2\2\u015e\u015c\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("\u016d\3\2\2\2\u0160\u015e\3\2\2\2\u0161\u0163\5.\30\2")
        buf.write("\u0162\u0161\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0162\3")
        buf.write("\2\2\2\u0164\u0165\3\2\2\2\u0165\u0169\3\2\2\2\u0166\u0168")
        buf.write("\7`\2\2\u0167\u0166\3\2\2\2\u0168\u016b\3\2\2\2\u0169")
        buf.write("\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016d\3\2\2\2")
        buf.write("\u016b\u0169\3\2\2\2\u016c\u015e\3\2\2\2\u016c\u0162\3")
        buf.write("\2\2\2\u016d-\3\2\2\2\u016e\u0170\7`\2\2\u016f\u016e\3")
        buf.write("\2\2\2\u0170\u0171\3\2\2\2\u0171\u016f\3\2\2\2\u0171\u0172")
        buf.write("\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0174\7\16\2\2\u0174")
        buf.write("\u0175\5\32\16\2\u0175/\3\2\2\2\u0176\u017d\5\62\32\2")
        buf.write("\u0177\u017d\5\66\34\2\u0178\u017d\5V,\2\u0179\u017d\5")
        buf.write("d\63\2\u017a\u017d\5\64\33\2\u017b\u017d\5N(\2\u017c\u0176")
        buf.write("\3\2\2\2\u017c\u0177\3\2\2\2\u017c\u0178\3\2\2\2\u017c")
        buf.write("\u0179\3\2\2\2\u017c\u017a\3\2\2\2\u017c\u017b\3\2\2\2")
        buf.write("\u017d\61\3\2\2\2\u017e\u017f\7\3\2\2\u017f\u0180\7\23")
        buf.write("\2\2\u0180\u0181\58\35\2\u0181\u0182\7\24\2\2\u0182\u0183")
        buf.write("\7\3\2\2\u0183\u0184\5,\27\2\u0184\u0185\7\5\2\2\u0185")
        buf.write("\u0186\5> \2\u0186\u0187\7\5\2\2\u0187\63\3\2\2\2\u0188")
        buf.write("\u0189\7\3\2\2\u0189\u018a\7\25\2\2\u018a\u018b\5:\36")
        buf.write("\2\u018b\u018c\7\24\2\2\u018c\u018d\7\3\2\2\u018d\u018e")
        buf.write("\5,\27\2\u018e\u018f\7\5\2\2\u018f\u0190\7\26\2\2\u0190")
        buf.write("\u0191\5B\"\2\u0191\u0192\7\5\2\2\u0192\65\3\2\2\2\u0193")
        buf.write("\u0194\7\3\2\2\u0194\u0195\7\27\2\2\u0195\u0196\5<\37")
        buf.write("\2\u0196\u0197\7\24\2\2\u0197\u0198\7\3\2\2\u0198\u0199")
        buf.write("\5,\27\2\u0199\u019a\7\5\2\2\u019a\u019b\5> \2\u019b\u019c")
        buf.write("\7\5\2\2\u019c\67\3\2\2\2\u019d\u019e\t\2\2\2\u019e9\3")
        buf.write("\2\2\2\u019f\u01a0\7^\2\2\u01a0;\3\2\2\2\u01a1\u01a2\t")
        buf.write("\2\2\2\u01a2=\3\2\2\2\u01a3\u01a4\7e\2\2\u01a4\u01a5\5")
        buf.write("@!\2\u01a5\u01a6\7f\2\2\u01a6\u01a7\5r:\2\u01a7?\3\2\2")
        buf.write("\2\u01a8\u01a9\7\3\2\2\u01a9\u01ac\7\5\2\2\u01aa\u01ac")
        buf.write("\5B\"\2\u01ab\u01a8\3\2\2\2\u01ab\u01aa\3\2\2\2\u01ac")
        buf.write("A\3\2\2\2\u01ad\u01de\5H%\2\u01ae\u01af\7\3\2\2\u01af")
        buf.write("\u01b3\7\30\2\2\u01b0\u01b2\5B\"\2\u01b1\u01b0\3\2\2\2")
        buf.write("\u01b2\u01b5\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b3\u01b4\3")
        buf.write("\2\2\2\u01b4\u01b6\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b6\u01de")
        buf.write("\7\5\2\2\u01b7\u01b8\7\3\2\2\u01b8\u01bc\7\31\2\2\u01b9")
        buf.write("\u01bb\5B\"\2\u01ba\u01b9\3\2\2\2\u01bb\u01be\3\2\2\2")
        buf.write("\u01bc\u01ba\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01bf\3")
        buf.write("\2\2\2\u01be\u01bc\3\2\2\2\u01bf\u01de\7\5\2\2\u01c0\u01c1")
        buf.write("\7\3\2\2\u01c1\u01c2\7\32\2\2\u01c2\u01c3\5B\"\2\u01c3")
        buf.write("\u01c4\7\5\2\2\u01c4\u01de\3\2\2\2\u01c5\u01c6\7\3\2\2")
        buf.write("\u01c6\u01c7\7\33\2\2\u01c7\u01c8\5B\"\2\u01c8\u01c9\5")
        buf.write("B\"\2\u01c9\u01ca\7\5\2\2\u01ca\u01de\3\2\2\2\u01cb\u01cc")
        buf.write("\7\3\2\2\u01cc\u01cd\7\34\2\2\u01cd\u01ce\7\3\2\2\u01ce")
        buf.write("\u01cf\5,\27\2\u01cf\u01d0\7\5\2\2\u01d0\u01d1\5B\"\2")
        buf.write("\u01d1\u01d2\7\5\2\2\u01d2\u01de\3\2\2\2\u01d3\u01d4\7")
        buf.write("\3\2\2\u01d4\u01d5\7\35\2\2\u01d5\u01d6\7\3\2\2\u01d6")
        buf.write("\u01d7\5,\27\2\u01d7\u01d8\7\5\2\2\u01d8\u01d9\5B\"\2")
        buf.write("\u01d9\u01da\7\5\2\2\u01da\u01de\3\2\2\2\u01db\u01de\5")
        buf.write("F$\2\u01dc\u01de\5D#\2\u01dd\u01ad\3\2\2\2\u01dd\u01ae")
        buf.write("\3\2\2\2\u01dd\u01b7\3\2\2\2\u01dd\u01c0\3\2\2\2\u01dd")
        buf.write("\u01c5\3\2\2\2\u01dd\u01cb\3\2\2\2\u01dd\u01d3\3\2\2\2")
        buf.write("\u01dd\u01db\3\2\2\2\u01dd\u01dc\3\2\2\2\u01deC\3\2\2")
        buf.write("\2\u01df\u01e0\7\3\2\2\u01e0\u01e1\7\36\2\2\u01e1\u01e2")
        buf.write("\5J&\2\u01e2\u01e3\5J&\2\u01e3\u01e4\7\5\2\2\u01e4E\3")
        buf.write("\2\2\2\u01e5\u01e6\7\3\2\2\u01e6\u01e7\5~@\2\u01e7\u01e8")
        buf.write("\5f\64\2\u01e8\u01e9\5f\64\2\u01e9\u01ea\7\5\2\2\u01ea")
        buf.write("G\3\2\2\2\u01eb\u01ec\7\3\2\2\u01ec\u01f0\5*\26\2\u01ed")
        buf.write("\u01ef\5J&\2\u01ee\u01ed\3\2\2\2\u01ef\u01f2\3\2\2\2\u01f0")
        buf.write("\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3\3\2\2\2")
        buf.write("\u01f2\u01f0\3\2\2\2\u01f3\u01f4\7\5\2\2\u01f4I\3\2\2")
        buf.write("\2\u01f5\u01fb\7^\2\2\u01f6\u01fb\7a\2\2\u01f7\u01fb\7")
        buf.write("`\2\2\u01f8\u01fb\7\37\2\2\u01f9\u01fb\5L\'\2\u01fa\u01f5")
        buf.write("\3\2\2\2\u01fa\u01f6\3\2\2\2\u01fa\u01f7\3\2\2\2\u01fa")
        buf.write("\u01f8\3\2\2\2\u01fa\u01f9\3\2\2\2\u01fbK\3\2\2\2\u01fc")
        buf.write("\u01fd\7\3\2\2\u01fd\u0201\5\"\22\2\u01fe\u0200\5J&\2")
        buf.write("\u01ff\u01fe\3\2\2\2\u0200\u0203\3\2\2\2\u0201\u01ff\3")
        buf.write("\2\2\2\u0201\u0202\3\2\2\2\u0202\u0204\3\2\2\2\u0203\u0201")
        buf.write("\3\2\2\2\u0204\u0205\7\5\2\2\u0205\u0212\3\2\2\2\u0206")
        buf.write("\u0207\7\3\2\2\u0207\u0208\5x=\2\u0208\u0209\5J&\2\u0209")
        buf.write("\u020a\5J&\2\u020a\u020b\7\5\2\2\u020b\u0212\3\2\2\2\u020c")
        buf.write("\u020d\7\3\2\2\u020d\u020e\5z>\2\u020e\u020f\5J&\2\u020f")
        buf.write("\u0210\7\5\2\2\u0210\u0212\3\2\2\2\u0211\u01fc\3\2\2\2")
        buf.write("\u0211\u0206\3\2\2\2\u0211\u020c\3\2\2\2\u0212M\3\2\2")
        buf.write("\2\u0213\u0214\7\3\2\2\u0214\u0215\7 \2\2\u0215\u0216")
        buf.write("\58\35\2\u0216\u0217\7\24\2\2\u0217\u0218\7\3\2\2\u0218")
        buf.write("\u0219\5,\27\2\u0219\u021a\7\5\2\2\u021a\u021b\5P)\2\u021b")
        buf.write("\u021c\7\5\2\2\u021cO\3\2\2\2\u021d\u021e\7e\2\2\u021e")
        buf.write("\u021f\5@!\2\u021f\u0220\7f\2\2\u0220\u0221\5R*\2\u0221")
        buf.write("Q\3\2\2\2\u0222\u0223\7\3\2\2\u0223\u0227\7\30\2\2\u0224")
        buf.write("\u0226\5T+\2\u0225\u0224\3\2\2\2\u0226\u0229\3\2\2\2\u0227")
        buf.write("\u0225\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u022a\3\2\2\2")
        buf.write("\u0229\u0227\3\2\2\2\u022a\u022d\7\5\2\2\u022b\u022d\5")
        buf.write("T+\2\u022c\u0222\3\2\2\2\u022c\u022b\3\2\2\2\u022dS\3")
        buf.write("\2\2\2\u022e\u022f\7\3\2\2\u022f\u0230\5\u0082B\2\u0230")
        buf.write("\u0231\5L\'\2\u0231\u0232\5h\65\2\u0232\u0233\7\5\2\2")
        buf.write("\u0233U\3\2\2\2\u0234\u0235\7\3\2\2\u0235\u0236\7!\2\2")
        buf.write("\u0236\u0237\58\35\2\u0237\u0238\7\24\2\2\u0238\u0239")
        buf.write("\7\3\2\2\u0239\u023a\5,\27\2\u023a\u023b\7\5\2\2\u023b")
        buf.write("\u023c\5X-\2\u023c\u023d\7\5\2\2\u023d\u0248\3\2\2\2\u023e")
        buf.write("\u023f\7\3\2\2\u023f\u0240\7!\2\2\u0240\u0241\58\35\2")
        buf.write("\u0241\u0242\7\24\2\2\u0242\u0243\7\3\2\2\u0243\u0244")
        buf.write("\7\5\2\2\u0244\u0245\5X-\2\u0245\u0246\7\5\2\2\u0246\u0248")
        buf.write("\3\2\2\2\u0247\u0234\3\2\2\2\u0247\u023e\3\2\2\2\u0248")
        buf.write("W\3\2\2\2\u0249\u024a\7\"\2\2\u024a\u0258\5\u0084C\2\u024b")
        buf.write("\u024f\7\26\2\2\u024c\u024d\7\3\2\2\u024d\u0250\7\5\2")
        buf.write("\2\u024e\u0250\5Z.\2\u024f\u024c\3\2\2\2\u024f\u024e\3")
        buf.write("\2\2\2\u0250\u0258\3\2\2\2\u0251\u0255\7f\2\2\u0252\u0253")
        buf.write("\7\3\2\2\u0253\u0256\7\5\2\2\u0254\u0256\5\u008cG\2\u0255")
        buf.write("\u0252\3\2\2\2\u0255\u0254\3\2\2\2\u0256\u0258\3\2\2\2")
        buf.write("\u0257\u0249\3\2\2\2\u0257\u024b\3\2\2\2\u0257\u0251\3")
        buf.write("\2\2\2\u0258Y\3\2\2\2\u0259\u026c\5\\/\2\u025a\u025b\7")
        buf.write("\3\2\2\u025b\u025f\7\30\2\2\u025c\u025e\5Z.\2\u025d\u025c")
        buf.write("\3\2\2\2\u025e\u0261\3\2\2\2\u025f\u025d\3\2\2\2\u025f")
        buf.write("\u0260\3\2\2\2\u0260\u0262\3\2\2\2\u0261\u025f\3\2\2\2")
        buf.write("\u0262\u026c\7\5\2\2\u0263\u0264\7\3\2\2\u0264\u0265\7")
        buf.write("\35\2\2\u0265\u0266\7\3\2\2\u0266\u0267\5,\27\2\u0267")
        buf.write("\u0268\7\5\2\2\u0268\u0269\5Z.\2\u0269\u026a\7\5\2\2\u026a")
        buf.write("\u026c\3\2\2\2\u026b\u0259\3\2\2\2\u026b\u025a\3\2\2\2")
        buf.write("\u026b\u0263\3\2\2\2\u026c[\3\2\2\2\u026d\u0277\5^\60")
        buf.write("\2\u026e\u026f\7\3\2\2\u026f\u0271\7#\2\2\u0270\u0272")
        buf.write("\7^\2\2\u0271\u0270\3\2\2\2\u0271\u0272\3\2\2\2\u0272")
        buf.write("\u0273\3\2\2\2\u0273\u0274\5^\60\2\u0274\u0275\7\5\2\2")
        buf.write("\u0275\u0277\3\2\2\2\u0276\u026d\3\2\2\2\u0276\u026e\3")
        buf.write("\2\2\2\u0277]\3\2\2\2\u0278\u0279\7\3\2\2\u0279\u027a")
        buf.write("\7$\2\2\u027a\u027b\5`\61\2\u027b\u027c\5B\"\2\u027c\u027d")
        buf.write("\7\5\2\2\u027d\u0285\3\2\2\2\u027e\u027f\7\3\2\2\u027f")
        buf.write("\u0280\7%\2\2\u0280\u0281\5b\62\2\u0281\u0282\5B\"\2\u0282")
        buf.write("\u0283\7\5\2\2\u0283\u0285\3\2\2\2\u0284\u0278\3\2\2\2")
        buf.write("\u0284\u027e\3\2\2\2\u0285_\3\2\2\2\u0286\u0287\t\3\2")
        buf.write("\2\u0287a\3\2\2\2\u0288\u0289\7(\2\2\u0289c\3\2\2\2\u028a")
        buf.write("\u028b\7\3\2\2\u028b\u028c\7)\2\2\u028c\u028d\5,\27\2")
        buf.write("\u028d\u028e\5B\"\2\u028e\u028f\7\5\2\2\u028fe\3\2\2\2")
        buf.write("\u0290\u0294\5L\'\2\u0291\u0294\7a\2\2\u0292\u0294\7`")
        buf.write("\2\2\u0293\u0290\3\2\2\2\u0293\u0291\3\2\2\2\u0293\u0292")
        buf.write("\3\2\2\2\u0294g\3\2\2\2\u0295\u0296\7\3\2\2\u0296\u0297")
        buf.write("\7*\2\2\u0297\u0298\5j\66\2\u0298\u0299\7\5\2\2\u0299")
        buf.write("\u02a5\3\2\2\2\u029a\u029b\7\3\2\2\u029b\u029c\7*\2\2")
        buf.write("\u029c\u029d\5l\67\2\u029d\u029e\7\5\2\2\u029e\u02a5\3")
        buf.write("\2\2\2\u029f\u02a0\7\3\2\2\u02a0\u02a1\7*\2\2\u02a1\u02a2")
        buf.write("\5n8\2\u02a2\u02a3\7\5\2\2\u02a3\u02a5\3\2\2\2\u02a4\u0295")
        buf.write("\3\2\2\2\u02a4\u029a\3\2\2\2\u02a4\u029f\3\2\2\2\u02a5")
        buf.write("i\3\2\2\2\u02a6\u02a7\5L\'\2\u02a7\u02a8\7\37\2\2\u02a8")
        buf.write("\u02ac\3\2\2\2\u02a9\u02aa\7\37\2\2\u02aa\u02ac\5L\'\2")
        buf.write("\u02ab\u02a6\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ack\3\2\2")
        buf.write("\2\u02ad\u02ae\7a\2\2\u02ae\u02b2\7\37\2\2\u02af\u02b0")
        buf.write("\7\37\2\2\u02b0\u02b2\7a\2\2\u02b1\u02ad\3\2\2\2\u02b1")
        buf.write("\u02af\3\2\2\2\u02b2m\3\2\2\2\u02b3\u02b4\7`\2\2\u02b4")
        buf.write("\u02b8\7\37\2\2\u02b5\u02b6\7\37\2\2\u02b6\u02b8\7`\2")
        buf.write("\2\u02b7\u02b3\3\2\2\2\u02b7\u02b5\3\2\2\2\u02b8o\3\2")
        buf.write("\2\2\u02b9\u02ba\7\3\2\2\u02ba\u02be\5\"\22\2\u02bb\u02bd")
        buf.write("\5J&\2\u02bc\u02bb\3\2\2\2\u02bd\u02c0\3\2\2\2\u02be\u02bc")
        buf.write("\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c1\3\2\2\2\u02c0")
        buf.write("\u02be\3\2\2\2\u02c1\u02c2\7\5\2\2\u02c2q\3\2\2\2\u02c3")
        buf.write("\u02c4\7\3\2\2\u02c4\u02c8\7\30\2\2\u02c5\u02c7\5t;\2")
        buf.write("\u02c6\u02c5\3\2\2\2\u02c7\u02ca\3\2\2\2\u02c8\u02c6\3")
        buf.write("\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02cb\3\2\2\2\u02ca\u02c8")
        buf.write("\3\2\2\2\u02cb\u02ce\7\5\2\2\u02cc\u02ce\5t;\2\u02cd\u02c3")
        buf.write("\3\2\2\2\u02cd\u02cc\3\2\2\2\u02ces\3\2\2\2\u02cf\u02d0")
        buf.write("\7\3\2\2\u02d0\u02d1\7\35\2\2\u02d1\u02d2\7\3\2\2\u02d2")
        buf.write("\u02d3\5,\27\2\u02d3\u02d4\7\5\2\2\u02d4\u02d5\5r:\2\u02d5")
        buf.write("\u02d6\7\5\2\2\u02d6\u02ed\3\2\2\2\u02d7\u02d8\7\3\2\2")
        buf.write("\u02d8\u02d9\7+\2\2\u02d9\u02da\5B\"\2\u02da\u02db\5v")
        buf.write("<\2\u02db\u02dc\7\5\2\2\u02dc\u02ed\3\2\2\2\u02dd\u02de")
        buf.write("\7\3\2\2\u02de\u02df\7+\2\2\u02df\u02e0\5B\"\2\u02e0\u02e1")
        buf.write("\7\3\2\2\u02e1\u02e5\7\30\2\2\u02e2\u02e4\5v<\2\u02e3")
        buf.write("\u02e2\3\2\2\2\u02e4\u02e7\3\2\2\2\u02e5\u02e3\3\2\2\2")
        buf.write("\u02e5\u02e6\3\2\2\2\u02e6\u02e8\3\2\2\2\u02e7\u02e5\3")
        buf.write("\2\2\2\u02e8\u02e9\7\5\2\2\u02e9\u02ea\7\5\2\2\u02ea\u02ed")
        buf.write("\3\2\2\2\u02eb\u02ed\5v<\2\u02ec\u02cf\3\2\2\2\u02ec\u02d7")
        buf.write("\3\2\2\2\u02ec\u02dd\3\2\2\2\u02ec\u02eb\3\2\2\2\u02ed")
        buf.write("u\3\2\2\2\u02ee\u02ef\7\3\2\2\u02ef\u02f0\5\u0080A\2\u02f0")
        buf.write("\u02f1\5L\'\2\u02f1\u02f2\5f\64\2\u02f2\u02f3\7\5\2\2")
        buf.write("\u02f3\u0301\3\2\2\2\u02f4\u02f5\7\3\2\2\u02f5\u02f6\7")
        buf.write("\32\2\2\u02f6\u02f7\5H%\2\u02f7\u02f8\7\5\2\2\u02f8\u0301")
        buf.write("\3\2\2\2\u02f9\u0301\5H%\2\u02fa\u02fb\7\3\2\2\u02fb\u02fc")
        buf.write("\7,\2\2\u02fc\u02fd\5L\'\2\u02fd\u02fe\5J&\2\u02fe\u02ff")
        buf.write("\7\5\2\2\u02ff\u0301\3\2\2\2\u0300\u02ee\3\2\2\2\u0300")
        buf.write("\u02f4\3\2\2\2\u0300\u02f9\3\2\2\2\u0300\u02fa\3\2\2\2")
        buf.write("\u0301w\3\2\2\2\u0302\u0303\t\4\2\2\u0303y\3\2\2\2\u0304")
        buf.write("\u0305\t\5\2\2\u0305{\3\2\2\2\u0306\u0307\t\6\2\2\u0307")
        buf.write("}\3\2\2\2\u0308\u0309\t\7\2\2\u0309\177\3\2\2\2\u030a")
        buf.write("\u030b\t\b\2\2\u030b\u0081\3\2\2\2\u030c\u030d\t\t\2\2")
        buf.write("\u030d\u0083\3\2\2\2\u030e\u030f\7\3\2\2\u030f\u0311\7")
        buf.write("\30\2\2\u0310\u0312\5\u0086D\2\u0311\u0310\3\2\2\2\u0312")
        buf.write("\u0313\3\2\2\2\u0313\u0311\3\2\2\2\u0313\u0314\3\2\2\2")
        buf.write("\u0314\u0315\3\2\2\2\u0315\u0316\7\5\2\2\u0316\u031b\3")
        buf.write("\2\2\2\u0317\u0318\7\3\2\2\u0318\u031b\7\5\2\2\u0319\u031b")
        buf.write("\5\u0086D\2\u031a\u030e\3\2\2\2\u031a\u0317\3\2\2\2\u031a")
        buf.write("\u0319\3\2\2\2\u031b\u0085\3\2\2\2\u031c\u031d\7\3\2\2")
        buf.write("\u031d\u031e\5\u0088E\2\u031e\u031f\7C\2\2\u031f\u0320")
        buf.write("\5\u008aF\2\u0320\u0321\7\5\2\2\u0321\u0329\3\2\2\2\u0322")
        buf.write("\u0323\7\3\2\2\u0323\u0324\7$\2\2\u0324\u0325\5`\61\2")
        buf.write("\u0325\u0326\5\u0086D\2\u0326\u0327\7\5\2\2\u0327\u0329")
        buf.write("\3\2\2\2\u0328\u031c\3\2\2\2\u0328\u0322\3\2\2\2\u0329")
        buf.write("\u0087\3\2\2\2\u032a\u032b\t\n\2\2\u032b\u0089\3\2\2\2")
        buf.write("\u032c\u032f\7a\2\2\u032d\u032f\5f\64\2\u032e\u032c\3")
        buf.write("\2\2\2\u032e\u032d\3\2\2\2\u032f\u008b\3\2\2\2\u0330\u0331")
        buf.write("\7\3\2\2\u0331\u0335\7\30\2\2\u0332\u0334\5\u008cG\2\u0333")
        buf.write("\u0332\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333\3\2\2\2")
        buf.write("\u0335\u0336\3\2\2\2\u0336\u0338\3\2\2\2\u0337\u0335\3")
        buf.write("\2\2\2\u0338\u034f\7\5\2\2\u0339\u034f\5\u008eH\2\u033a")
        buf.write("\u033b\7\3\2\2\u033b\u033c\7\35\2\2\u033c\u033d\7\3\2")
        buf.write("\2\u033d\u033e\5,\27\2\u033e\u033f\7\5\2\2\u033f\u0340")
        buf.write("\5\u008cG\2\u0340\u0341\7\5\2\2\u0341\u034f\3\2\2\2\u0342")
        buf.write("\u0343\7\3\2\2\u0343\u0344\7+\2\2\u0344\u0345\5Z.\2\u0345")
        buf.write("\u0346\5\u008eH\2\u0346\u0347\7\5\2\2\u0347\u034f\3\2")
        buf.write("\2\2\u0348\u0349\7\3\2\2\u0349\u034a\5\u0080A\2\u034a")
        buf.write("\u034b\5p9\2\u034b\u034c\5\u0092J\2\u034c\u034d\7\5\2")
        buf.write("\2\u034d\u034f\3\2\2\2\u034e\u0330\3\2\2\2\u034e\u0339")
        buf.write("\3\2\2\2\u034e\u033a\3\2\2\2\u034e\u0342\3\2\2\2\u034e")
        buf.write("\u0348\3\2\2\2\u034f\u008d\3\2\2\2\u0350\u0351\7\3\2\2")
        buf.write("\u0351\u0352\7$\2\2\u0352\u0353\5`\61\2\u0353\u0354\5")
        buf.write("\u008cG\2\u0354\u0355\7\5\2\2\u0355\u0363\3\2\2\2\u0356")
        buf.write("\u0357\7\3\2\2\u0357\u0358\7$\2\2\u0358\u0359\5`\61\2")
        buf.write("\u0359\u035a\5\u0090I\2\u035a\u035b\7\5\2\2\u035b\u0363")
        buf.write("\3\2\2\2\u035c\u035d\7\3\2\2\u035d\u035e\5\u0080A\2\u035e")
        buf.write("\u035f\5p9\2\u035f\u0360\5f\64\2\u0360\u0361\7\5\2\2\u0361")
        buf.write("\u0363\3\2\2\2\u0362\u0350\3\2\2\2\u0362\u0356\3\2\2\2")
        buf.write("\u0362\u035c\3\2\2\2\u0363\u008f\3\2\2\2\u0364\u0365\7")
        buf.write("\3\2\2\u0365\u0366\5\u0080A\2\u0366\u0367\5p9\2\u0367")
        buf.write("\u0368\5\u0092J\2\u0368\u0369\7\5\2\2\u0369\u0091\3\2")
        buf.write("\2\2\u036a\u0371\7\3\2\2\u036b\u036c\5x=\2\u036c\u036d")
        buf.write("\5\u0092J\2\u036d\u036e\5\u0092J\2\u036e\u0372\3\2\2\2")
        buf.write("\u036f\u0370\7\16\2\2\u0370\u0372\5\u0092J\2\u0371\u036b")
        buf.write("\3\2\2\2\u0371\u036f\3\2\2\2\u0372\u0373\3\2\2\2\u0373")
        buf.write("\u0374\7\5\2\2\u0374\u0378\3\2\2\2\u0375\u0378\7C\2\2")
        buf.write("\u0376\u0378\5f\64\2\u0377\u036a\3\2\2\2\u0377\u0375\3")
        buf.write("\2\2\2\u0377\u0376\3\2\2\2\u0378\u0093\3\2\2\2\u0379\u037a")
        buf.write("\7\3\2\2\u037a\u037b\7\4\2\2\u037b\u037c\5\u0098M\2\u037c")
        buf.write("\u037e\5\u009aN\2\u037d\u037f\5\n\6\2\u037e\u037d\3\2")
        buf.write("\2\2\u037e\u037f\3\2\2\2\u037f\u0381\3\2\2\2\u0380\u0382")
        buf.write("\5\u009cO\2\u0381\u0380\3\2\2\2\u0381\u0382\3\2\2\2\u0382")
        buf.write("\u0383\3\2\2\2\u0383\u0384\5\u00a2R\2\u0384\u0388\5\u00ae")
        buf.write("X\2\u0385\u0387\5\u0096L\2\u0386\u0385\3\2\2\2\u0387\u038a")
        buf.write("\3\2\2\2\u0388\u0386\3\2\2\2\u0388\u0389\3\2\2\2\u0389")
        buf.write("\u038b\3\2\2\2\u038a\u0388\3\2\2\2\u038b\u038c\7\5\2\2")
        buf.write("\u038c\u0095\3\2\2\2\u038d\u0391\5\u00b0Y\2\u038e\u0391")
        buf.write("\5\u009eP\2\u038f\u0391\5\u00b4[\2\u0390\u038d\3\2\2\2")
        buf.write("\u0390\u038e\3\2\2\2\u0390\u038f\3\2\2\2\u0391\u0097\3")
        buf.write("\2\2\2\u0392\u0393\7\3\2\2\u0393\u0394\7D\2\2\u0394\u0395")
        buf.write("\7^\2\2\u0395\u0396\7\5\2\2\u0396\u0099\3\2\2\2\u0397")
        buf.write("\u0398\7\3\2\2\u0398\u0399\7E\2\2\u0399\u039a\7^\2\2\u039a")
        buf.write("\u039b\7\5\2\2\u039b\u009b\3\2\2\2\u039c\u039d\7\3\2\2")
        buf.write("\u039d\u039e\7F\2\2\u039e\u039f\5\24\13\2\u039f\u03a0")
        buf.write("\7\5\2\2\u03a0\u009d\3\2\2\2\u03a1\u03a2\7\3\2\2\u03a2")
        buf.write("\u03a4\7G\2\2\u03a3\u03a5\5\u00a0Q\2\u03a4\u03a3\3\2\2")
        buf.write("\2\u03a5\u03a6\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a6\u03a7")
        buf.write("\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\7\5\2\2\u03a9")
        buf.write("\u009f\3\2\2\2\u03aa\u03ab\7\3\2\2\u03ab\u03ac\7^\2\2")
        buf.write("\u03ac\u03ad\7\16\2\2\u03ad\u03ae\5\16\b\2\u03ae\u03af")
        buf.write("\7H\2\2\u03af\u03b0\7a\2\2\u03b0\u03b1\7I\2\2\u03b1\u03b2")
        buf.write("\7a\2\2\u03b2\u03b3\7J\2\2\u03b3\u03b4\7\5\2\2\u03b4\u00a1")
        buf.write("\3\2\2\2\u03b5\u03b6\7\3\2\2\u03b6\u03ba\7d\2\2\u03b7")
        buf.write("\u03b9\5\u00a8U\2\u03b8\u03b7\3\2\2\2\u03b9\u03bc\3\2")
        buf.write("\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bd")
        buf.write("\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd\u03be\7\5\2\2\u03be")
        buf.write("\u00a3\3\2\2\2\u03bf\u03c3\7^\2\2\u03c0\u03c3\7a\2\2\u03c1")
        buf.write("\u03c3\5\u00a6T\2\u03c2\u03bf\3\2\2\2\u03c2\u03c0\3\2")
        buf.write("\2\2\u03c2\u03c1\3\2\2\2\u03c3\u00a5\3\2\2\2\u03c4\u03c5")
        buf.write("\7\3\2\2\u03c5\u03c9\5\"\22\2\u03c6\u03c8\5\u00a4S\2\u03c7")
        buf.write("\u03c6\3\2\2\2\u03c8\u03cb\3\2\2\2\u03c9\u03c7\3\2\2\2")
        buf.write("\u03c9\u03ca\3\2\2\2\u03ca\u03cc\3\2\2\2\u03cb\u03c9\3")
        buf.write("\2\2\2\u03cc\u03cd\7\5\2\2\u03cd\u00a7\3\2\2\2\u03ce\u03e2")
        buf.write("\5\u00aaV\2\u03cf\u03d0\7\3\2\2\u03d0\u03d1\7\36\2\2\u03d1")
        buf.write("\u03d2\5\u00a6T\2\u03d2\u03d3\7a\2\2\u03d3\u03d4\7\5\2")
        buf.write("\2\u03d4\u03e2\3\2\2\2\u03d5\u03d6\7\3\2\2\u03d6\u03d7")
        buf.write("\7$\2\2\u03d7\u03d8\7a\2\2\u03d8\u03d9\5\u00aaV\2\u03d9")
        buf.write("\u03da\7\5\2\2\u03da\u03e2\3\2\2\2\u03db\u03dc\7\3\2\2")
        buf.write("\u03dc\u03dd\7\36\2\2\u03dd\u03de\5\u00a6T\2\u03de\u03df")
        buf.write("\7^\2\2\u03df\u03e0\7\5\2\2\u03e0\u03e2\3\2\2\2\u03e1")
        buf.write("\u03ce\3\2\2\2\u03e1\u03cf\3\2\2\2\u03e1\u03d5\3\2\2\2")
        buf.write("\u03e1\u03db\3\2\2\2\u03e2\u00a9\3\2\2\2\u03e3\u03ea\5")
        buf.write("\u00acW\2\u03e4\u03e5\7\3\2\2\u03e5\u03e6\7\32\2\2\u03e6")
        buf.write("\u03e7\5\u00acW\2\u03e7\u03e8\7\5\2\2\u03e8\u03ea\3\2")
        buf.write("\2\2\u03e9\u03e3\3\2\2\2\u03e9\u03e4\3\2\2\2\u03ea\u00ab")
        buf.write("\3\2\2\2\u03eb\u03ec\7\3\2\2\u03ec\u03f0\5*\26\2\u03ed")
        buf.write("\u03ef\5\u00a4S\2\u03ee\u03ed\3\2\2\2\u03ef\u03f2\3\2")
        buf.write("\2\2\u03f0\u03ee\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f3")
        buf.write("\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f3\u03f4\7\5\2\2\u03f4")
        buf.write("\u00ad\3\2\2\2\u03f5\u03f6\7\3\2\2\u03f6\u03f7\7K\2\2")
        buf.write("\u03f7\u03f8\5B\"\2\u03f8\u03f9\7\5\2\2\u03f9\u00af\3")
        buf.write("\2\2\2\u03fa\u03fb\7\3\2\2\u03fb\u03fc\7L\2\2\u03fc\u03fd")
        buf.write("\5\u00b2Z\2\u03fd\u03fe\7\5\2\2\u03fe\u00b1\3\2\2\2\u03ff")
        buf.write("\u0400\7\3\2\2\u0400\u0404\7\30\2\2\u0401\u0403\5\u00b2")
        buf.write("Z\2\u0402\u0401\3\2\2\2\u0403\u0406\3\2\2\2\u0404\u0402")
        buf.write("\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0407\3\2\2\2\u0406")
        buf.write("\u0404\3\2\2\2\u0407\u041e\7\5\2\2\u0408\u0409\7\3\2\2")
        buf.write("\u0409\u040a\7\35\2\2\u040a\u040b\7\3\2\2\u040b\u040c")
        buf.write("\5,\27\2\u040c\u040d\7\5\2\2\u040d\u040e\5\u00b2Z\2\u040e")
        buf.write("\u040f\7\5\2\2\u040f\u041e\3\2\2\2\u0410\u0411\7\3\2\2")
        buf.write("\u0411\u0413\7#\2\2\u0412\u0414\7^\2\2\u0413\u0412\3\2")
        buf.write("\2\2\u0413\u0414\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0416")
        buf.write("\5\u00be`\2\u0416\u0417\7\5\2\2\u0417\u041e\3\2\2\2\u0418")
        buf.write("\u041a\5\u00be`\2\u0419\u0418\3\2\2\2\u041a\u041b\3\2")
        buf.write("\2\2\u041b\u0419\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041e")
        buf.write("\3\2\2\2\u041d\u03ff\3\2\2\2\u041d\u0408\3\2\2\2\u041d")
        buf.write("\u0410\3\2\2\2\u041d\u0419\3\2\2\2\u041e\u00b3\3\2\2\2")
        buf.write("\u041f\u0420\7\3\2\2\u0420\u0421\7M\2\2\u0421\u0422\5")
        buf.write("\u00b6\\\2\u0422\u0423\5\u00b8]\2\u0423\u0424\7\5\2\2")
        buf.write("\u0424\u00b5\3\2\2\2\u0425\u0426\t\13\2\2\u0426\u00b7")
        buf.write("\3\2\2\2\u0427\u0434\5L\'\2\u0428\u0429\5\u00ba^\2\u0429")
        buf.write("\u042a\5\u00bc_\2\u042a\u0434\3\2\2\2\u042b\u042c\5\u00bc")
        buf.write("_\2\u042c\u042d\5\u00ba^\2\u042d\u0434\3\2\2\2\u042e\u0434")
        buf.write("\7P\2\2\u042f\u0430\7\3\2\2\u0430\u0431\7Q\2\2\u0431\u0432")
        buf.write("\7^\2\2\u0432\u0434\7\5\2\2\u0433\u0427\3\2\2\2\u0433")
        buf.write("\u0428\3\2\2\2\u0433\u042b\3\2\2\2\u0433\u042e\3\2\2\2")
        buf.write("\u0433\u042f\3\2\2\2\u0434\u00b9\3\2\2\2\u0435\u0436\7")
        buf.write("\3\2\2\u0436\u0437\7R\2\2\u0437\u0438\5L\'\2\u0438\u0439")
        buf.write("\7\5\2\2\u0439\u00bb\3\2\2\2\u043a\u043b\7\3\2\2\u043b")
        buf.write("\u043c\7S\2\2\u043c\u043d\5L\'\2\u043d\u043e\7\5\2\2\u043e")
        buf.write("\u00bd\3\2\2\2\u043f\u0440\7\3\2\2\u0440\u0442\7\30\2")
        buf.write("\2\u0441\u0443\5\u00be`\2\u0442\u0441\3\2\2\2\u0443\u0444")
        buf.write("\3\2\2\2\u0444\u0442\3\2\2\2\u0444\u0445\3\2\2\2\u0445")
        buf.write("\u0446\3\2\2\2\u0446\u0447\7\5\2\2\u0447\u0496\3\2\2\2")
        buf.write("\u0448\u0449\7\3\2\2\u0449\u044a\7\35\2\2\u044a\u044b")
        buf.write("\7\3\2\2\u044b\u044c\5,\27\2\u044c\u044d\7\5\2\2\u044d")
        buf.write("\u044e\5\u00be`\2\u044e\u044f\7\5\2\2\u044f\u0496\3\2")
        buf.write("\2\2\u0450\u0451\7\3\2\2\u0451\u0452\7$\2\2\u0452\u0453")
        buf.write("\7\'\2\2\u0453\u0454\5B\"\2\u0454\u0455\7\5\2\2\u0455")
        buf.write("\u0496\3\2\2\2\u0456\u0457\7\3\2\2\u0457\u0458\7T\2\2")
        buf.write("\u0458\u0459\5B\"\2\u0459\u045a\7\5\2\2\u045a\u0496\3")
        buf.write("\2\2\2\u045b\u045c\7\3\2\2\u045c\u045d\7U\2\2\u045d\u045e")
        buf.write("\5B\"\2\u045e\u045f\7\5\2\2\u045f\u0496\3\2\2\2\u0460")
        buf.write("\u0461\7\3\2\2\u0461\u0462\7V\2\2\u0462\u0463\7a\2\2\u0463")
        buf.write("\u0464\5B\"\2\u0464\u0465\7\5\2\2\u0465\u0496\3\2\2\2")
        buf.write("\u0466\u0467\7\3\2\2\u0467\u0468\7W\2\2\u0468\u0469\5")
        buf.write("B\"\2\u0469\u046a\7\5\2\2\u046a\u0496\3\2\2\2\u046b\u046c")
        buf.write("\7\3\2\2\u046c\u046d\7X\2\2\u046d\u046e\5B\"\2\u046e\u046f")
        buf.write("\5B\"\2\u046f\u0470\7\5\2\2\u0470\u0496\3\2\2\2\u0471")
        buf.write("\u0472\7\3\2\2\u0472\u0473\7Y\2\2\u0473\u0474\5B\"\2\u0474")
        buf.write("\u0475\5B\"\2\u0475\u0476\7\5\2\2\u0476\u0496\3\2\2\2")
        buf.write("\u0477\u0478\7\3\2\2\u0478\u0479\7Z\2\2\u0479\u047a\7")
        buf.write("a\2\2\u047a\u047b\5B\"\2\u047b\u047c\5B\"\2\u047c\u047d")
        buf.write("\7\5\2\2\u047d\u0496\3\2\2\2\u047e\u047f\7\3\2\2\u047f")
        buf.write("\u0480\7[\2\2\u0480\u0481\7a\2\2\u0481\u0482\7a\2\2\u0482")
        buf.write("\u0483\5B\"\2\u0483\u0484\7\5\2\2\u0484\u0496\3\2\2\2")
        buf.write("\u0485\u0486\7\3\2\2\u0486\u0487\7\\\2\2\u0487\u0488\7")
        buf.write("a\2\2\u0488\u0489\5B\"\2\u0489\u048a\7\5\2\2\u048a\u0496")
        buf.write("\3\2\2\2\u048b\u048c\7\3\2\2\u048c\u048e\7_\2\2\u048d")
        buf.write("\u048f\5\u00a6T\2\u048e\u048d\3\2\2\2\u048f\u0490\3\2")
        buf.write("\2\2\u0490\u048e\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0492")
        buf.write("\3\2\2\2\u0492\u0493\7\5\2\2\u0493\u0496\3\2\2\2\u0494")
        buf.write("\u0496\5B\"\2\u0495\u043f\3\2\2\2\u0495\u0448\3\2\2\2")
        buf.write("\u0495\u0450\3\2\2\2\u0495\u0456\3\2\2\2\u0495\u045b\3")
        buf.write("\2\2\2\u0495\u0460\3\2\2\2\u0495\u0466\3\2\2\2\u0495\u046b")
        buf.write("\3\2\2\2\u0495\u0471\3\2\2\2\u0495\u0477\3\2\2\2\u0495")
        buf.write("\u047e\3\2\2\2\u0495\u0485\3\2\2\2\u0495\u048b\3\2\2\2")
        buf.write("\u0495\u0494\3\2\2\2\u0496\u00bf\3\2\2\2W\u00c2\u00c8")
        buf.write("\u00cb\u00ce\u00d1\u00d4\u00d7\u00dc\u00e6\u00f5\u0101")
        buf.write("\u0105\u010a\u0111\u0115\u0121\u0126\u012a\u0131\u0139")
        buf.write("\u014f\u015e\u0164\u0169\u016c\u0171\u017c\u01ab\u01b3")
        buf.write("\u01bc\u01dd\u01f0\u01fa\u0201\u0211\u0227\u022c\u0247")
        buf.write("\u024f\u0255\u0257\u025f\u026b\u0271\u0276\u0284\u0293")
        buf.write("\u02a4\u02ab\u02b1\u02b7\u02be\u02c8\u02cd\u02e5\u02ec")
        buf.write("\u0300\u0313\u031a\u0328\u032e\u0335\u034e\u0362\u0371")
        buf.write("\u0377\u037e\u0381\u0388\u0390\u03a6\u03ba\u03c2\u03c9")
        buf.write("\u03e1\u03e9\u03f0\u0404\u0413\u041b\u041d\u0433\u0444")
        buf.write("\u0490\u0495")
        return buf.getvalue()


class fstripsParser ( Parser ):

    grammarFileName = "fstrips.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "'define'", "')'", "':free_functions'", 
                     "'domain'", "':requirements'", "':types'", "'int'", 
                     "'float'", "'number'", "'object'", "'-'", "'either'", 
                     "':functions'", "':constants'", "':predicates'", "':action'", 
                     "':parameters'", "':constraint'", "':condition'", "':event'", 
                     "'and'", "'or'", "'not'", "'imply'", "'exists'", "'forall'", 
                     "'='", "'#t'", "':process'", "':durative-action'", 
                     "':duration'", "'preference'", "'at'", "'over'", "'start'", 
                     "'end'", "'all'", "':derived'", "'*'", "'when'", "'assign'", 
                     "'+'", "'/'", "'^'", "'max'", "'min'", "'sin'", "'cos'", 
                     "'sqrt'", "'tan'", "'acos'", "'asin'", "'atan'", "'exp'", 
                     "'abs'", "'>'", "'<'", "'>='", "'<='", "'scale-up'", 
                     "'scale-down'", "'increase'", "'decrease'", "'?duration'", 
                     "'problem'", "':domain'", "':objects'", "':bounds'", 
                     "'['", "'..'", "']'", "':goal'", "':constraints'", 
                     "':metric'", "'minimize'", "'maximize'", "'(total-time)'", 
                     "'is-violated'", "':terminal'", "':stage'", "'always'", 
                     "'sometime'", "'within'", "'at-most-once'", "'sometime-after'", 
                     "'sometime-before'", "'always-within'", "'hold-during'", 
                     "'hold-after'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "':effect'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "REQUIRE_KEY", 
                      "NAME", "EXTNAME", "VARIABLE", "NUMBER", "LINE_COMMENT", 
                      "WHITESPACE", "K_INIT", "K_PRECONDITION", "K_EFFECT", 
                      "DOMAIN", "DOMAIN_NAME", "REQUIREMENTS", "TYPES", 
                      "EITHER_TYPE", "CONSTANTS", "FUNCTIONS", "FREE_FUNCTIONS", 
                      "PREDICATES", "ACTION", "CONSTRAINT", "EVENT", "GLOBAL_CONSTRAINT", 
                      "DURATIVE_ACTION", "PROBLEM", "PROBLEM_NAME", "PROBLEM_DOMAIN", 
                      "OBJECTS", "INIT", "FUNC_HEAD", "PRECONDITION", "EFFECT", 
                      "AND_GD", "OR_GD", "NOT_GD", "IMPLY_GD", "EXISTS_GD", 
                      "FORALL_GD", "COMPARISON_GD", "AND_EFFECT", "FORALL_EFFECT", 
                      "WHEN_EFFECT", "ASSIGN_EFFECT", "NOT_EFFECT", "PRED_HEAD", 
                      "GOAL", "BINARY_OP", "EQUALITY_CON", "MULTI_OP", "MINUS_OP", 
                      "UNARY_MINUS", "INIT_EQ", "INIT_AT", "NOT_PRED_INIT", 
                      "PRED_INST", "PROBLEM_CONSTRAINT", "PROBLEM_METRIC" ]

    RULE_pddlDoc = 0
    RULE_domain = 1
    RULE_free_functionsDef = 2
    RULE_domainName = 3
    RULE_requireDef = 4
    RULE_typesDef = 5
    RULE_numericBuiltinType = 6
    RULE_builtinType = 7
    RULE_nameList = 8
    RULE_typedNameList = 9
    RULE_nameListWithType = 10
    RULE_typename = 11
    RULE_primType = 12
    RULE_functionsDef = 13
    RULE_functionDeclGroup = 14
    RULE_atomicFunctionSkeleton = 15
    RULE_functionSymbol = 16
    RULE_constantsDef = 17
    RULE_predicatesDef = 18
    RULE_atomicFormulaSkeleton = 19
    RULE_predicate = 20
    RULE_variableList = 21
    RULE_variableListWithType = 22
    RULE_structureDef = 23
    RULE_actionDef = 24
    RULE_constraintDef = 25
    RULE_eventDef = 26
    RULE_actionName = 27
    RULE_constraintSymbol = 28
    RULE_eventSymbol = 29
    RULE_actionDefBody = 30
    RULE_precondition = 31
    RULE_goalDesc = 32
    RULE_equality = 33
    RULE_fComp = 34
    RULE_atomicTermFormula = 35
    RULE_term = 36
    RULE_functionTerm = 37
    RULE_processDef = 38
    RULE_processDefBody = 39
    RULE_processEffectList = 40
    RULE_processEffect = 41
    RULE_durativeActionDef = 42
    RULE_daDefBody = 43
    RULE_daGD = 44
    RULE_prefTimedGD = 45
    RULE_timedGD = 46
    RULE_timeSpecifier = 47
    RULE_interval = 48
    RULE_derivedDef = 49
    RULE_fExp = 50
    RULE_processEffectExp = 51
    RULE_processFunctionEff = 52
    RULE_processConstEff = 53
    RULE_processVarEff = 54
    RULE_fHead = 55
    RULE_effect = 56
    RULE_cEffect = 57
    RULE_atomic_effect = 58
    RULE_binaryOp = 59
    RULE_unaryBuiltIn = 60
    RULE_multiOp = 61
    RULE_binaryComp = 62
    RULE_assignOp = 63
    RULE_processEffectOp = 64
    RULE_durationConstraint = 65
    RULE_simpleDurationConstraint = 66
    RULE_durOp = 67
    RULE_durValue = 68
    RULE_daEffect = 69
    RULE_timedEffect = 70
    RULE_fAssignDA = 71
    RULE_fExpDA = 72
    RULE_problem = 73
    RULE_problemMeta = 74
    RULE_problemDecl = 75
    RULE_problemDomain = 76
    RULE_object_declaration = 77
    RULE_boundsDecl = 78
    RULE_typeBoundsDefinition = 79
    RULE_init = 80
    RULE_groundTerm = 81
    RULE_groundFunctionTerm = 82
    RULE_initEl = 83
    RULE_nameLiteral = 84
    RULE_groundAtomicFormula = 85
    RULE_goal = 86
    RULE_probConstraints = 87
    RULE_prefConGD = 88
    RULE_metricSpec = 89
    RULE_optimization = 90
    RULE_metricFExp = 91
    RULE_terminalCost = 92
    RULE_stageCost = 93
    RULE_conGD = 94

    ruleNames =  [ "pddlDoc", "domain", "free_functionsDef", "domainName", 
                   "requireDef", "typesDef", "numericBuiltinType", "builtinType", 
                   "nameList", "typedNameList", "nameListWithType", "typename", 
                   "primType", "functionsDef", "functionDeclGroup", "atomicFunctionSkeleton", 
                   "functionSymbol", "constantsDef", "predicatesDef", "atomicFormulaSkeleton", 
                   "predicate", "variableList", "variableListWithType", 
                   "structureDef", "actionDef", "constraintDef", "eventDef", 
                   "actionName", "constraintSymbol", "eventSymbol", "actionDefBody", 
                   "precondition", "goalDesc", "equality", "fComp", "atomicTermFormula", 
                   "term", "functionTerm", "processDef", "processDefBody", 
                   "processEffectList", "processEffect", "durativeActionDef", 
                   "daDefBody", "daGD", "prefTimedGD", "timedGD", "timeSpecifier", 
                   "interval", "derivedDef", "fExp", "processEffectExp", 
                   "processFunctionEff", "processConstEff", "processVarEff", 
                   "fHead", "effect", "cEffect", "atomic_effect", "binaryOp", 
                   "unaryBuiltIn", "multiOp", "binaryComp", "assignOp", 
                   "processEffectOp", "durationConstraint", "simpleDurationConstraint", 
                   "durOp", "durValue", "daEffect", "timedEffect", "fAssignDA", 
                   "fExpDA", "problem", "problemMeta", "problemDecl", "problemDomain", 
                   "object_declaration", "boundsDecl", "typeBoundsDefinition", 
                   "init", "groundTerm", "groundFunctionTerm", "initEl", 
                   "nameLiteral", "groundAtomicFormula", "goal", "probConstraints", 
                   "prefConGD", "metricSpec", "optimization", "metricFExp", 
                   "terminalCost", "stageCost", "conGD" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    REQUIRE_KEY=91
    NAME=92
    EXTNAME=93
    VARIABLE=94
    NUMBER=95
    LINE_COMMENT=96
    WHITESPACE=97
    K_INIT=98
    K_PRECONDITION=99
    K_EFFECT=100
    DOMAIN=101
    DOMAIN_NAME=102
    REQUIREMENTS=103
    TYPES=104
    EITHER_TYPE=105
    CONSTANTS=106
    FUNCTIONS=107
    FREE_FUNCTIONS=108
    PREDICATES=109
    ACTION=110
    CONSTRAINT=111
    EVENT=112
    GLOBAL_CONSTRAINT=113
    DURATIVE_ACTION=114
    PROBLEM=115
    PROBLEM_NAME=116
    PROBLEM_DOMAIN=117
    OBJECTS=118
    INIT=119
    FUNC_HEAD=120
    PRECONDITION=121
    EFFECT=122
    AND_GD=123
    OR_GD=124
    NOT_GD=125
    IMPLY_GD=126
    EXISTS_GD=127
    FORALL_GD=128
    COMPARISON_GD=129
    AND_EFFECT=130
    FORALL_EFFECT=131
    WHEN_EFFECT=132
    ASSIGN_EFFECT=133
    NOT_EFFECT=134
    PRED_HEAD=135
    GOAL=136
    BINARY_OP=137
    EQUALITY_CON=138
    MULTI_OP=139
    MINUS_OP=140
    UNARY_MINUS=141
    INIT_EQ=142
    INIT_AT=143
    NOT_PRED_INIT=144
    PRED_INST=145
    PROBLEM_CONSTRAINT=146
    PROBLEM_METRIC=147

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class PddlDocContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domain(self):
            return self.getTypedRuleContext(fstripsParser.DomainContext,0)


        def problem(self):
            return self.getTypedRuleContext(fstripsParser.ProblemContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_pddlDoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPddlDoc" ):
                listener.enterPddlDoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPddlDoc" ):
                listener.exitPddlDoc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPddlDoc" ):
                return visitor.visitPddlDoc(self)
            else:
                return visitor.visitChildren(self)




    def pddlDoc(self):

        localctx = fstripsParser.PddlDocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_pddlDoc)
        try:
            self.state = 192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 190
                self.domain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 191
                self.problem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DomainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domainName(self):
            return self.getTypedRuleContext(fstripsParser.DomainNameContext,0)


        def requireDef(self):
            return self.getTypedRuleContext(fstripsParser.RequireDefContext,0)


        def typesDef(self):
            return self.getTypedRuleContext(fstripsParser.TypesDefContext,0)


        def constantsDef(self):
            return self.getTypedRuleContext(fstripsParser.ConstantsDefContext,0)


        def predicatesDef(self):
            return self.getTypedRuleContext(fstripsParser.PredicatesDefContext,0)


        def functionsDef(self):
            return self.getTypedRuleContext(fstripsParser.FunctionsDefContext,0)


        def free_functionsDef(self):
            return self.getTypedRuleContext(fstripsParser.Free_functionsDefContext,0)


        def structureDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.StructureDefContext)
            else:
                return self.getTypedRuleContext(fstripsParser.StructureDefContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_domain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomain" ):
                listener.enterDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomain" ):
                listener.exitDomain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDomain" ):
                return visitor.visitDomain(self)
            else:
                return visitor.visitChildren(self)




    def domain(self):

        localctx = fstripsParser.DomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_domain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.match(fstripsParser.T__0)
            self.state = 195
            self.match(fstripsParser.T__1)
            self.state = 196
            self.domainName()
            self.state = 198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 197
                self.requireDef()


            self.state = 201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 200
                self.typesDef()


            self.state = 204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 203
                self.constantsDef()


            self.state = 207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 206
                self.predicatesDef()


            self.state = 210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 209
                self.functionsDef()


            self.state = 213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 212
                self.free_functionsDef()


            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fstripsParser.T__0:
                self.state = 215
                self.structureDef()
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 221
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Free_functionsDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.FunctionDeclGroupContext)
            else:
                return self.getTypedRuleContext(fstripsParser.FunctionDeclGroupContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_free_functionsDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFree_functionsDef" ):
                listener.enterFree_functionsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFree_functionsDef" ):
                listener.exitFree_functionsDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFree_functionsDef" ):
                return visitor.visitFree_functionsDef(self)
            else:
                return visitor.visitChildren(self)




    def free_functionsDef(self):

        localctx = fstripsParser.Free_functionsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_free_functionsDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.match(fstripsParser.T__0)
            self.state = 224
            self.match(fstripsParser.T__3)
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fstripsParser.T__0:
                self.state = 225
                self.functionDeclGroup()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 231
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DomainNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def getRuleIndex(self):
            return fstripsParser.RULE_domainName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomainName" ):
                listener.enterDomainName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomainName" ):
                listener.exitDomainName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDomainName" ):
                return visitor.visitDomainName(self)
            else:
                return visitor.visitChildren(self)




    def domainName(self):

        localctx = fstripsParser.DomainNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_domainName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(fstripsParser.T__0)
            self.state = 234
            self.match(fstripsParser.T__4)
            self.state = 235
            self.match(fstripsParser.NAME)
            self.state = 236
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequireDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRE_KEY(self, i:int=None):
            if i is None:
                return self.getTokens(fstripsParser.REQUIRE_KEY)
            else:
                return self.getToken(fstripsParser.REQUIRE_KEY, i)

        def getRuleIndex(self):
            return fstripsParser.RULE_requireDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireDef" ):
                listener.enterRequireDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireDef" ):
                listener.exitRequireDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequireDef" ):
                return visitor.visitRequireDef(self)
            else:
                return visitor.visitChildren(self)




    def requireDef(self):

        localctx = fstripsParser.RequireDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_requireDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(fstripsParser.T__0)
            self.state = 239
            self.match(fstripsParser.T__5)
            self.state = 241 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 240
                self.match(fstripsParser.REQUIRE_KEY)
                self.state = 243 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==fstripsParser.REQUIRE_KEY):
                    break

            self.state = 245
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypesDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(fstripsParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_typesDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypesDef" ):
                listener.enterTypesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypesDef" ):
                listener.exitTypesDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypesDef" ):
                return visitor.visitTypesDef(self)
            else:
                return visitor.visitChildren(self)




    def typesDef(self):

        localctx = fstripsParser.TypesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_typesDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(fstripsParser.T__0)
            self.state = 248
            self.match(fstripsParser.T__6)
            self.state = 249
            self.typedNameList()
            self.state = 250
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericBuiltinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_numericBuiltinType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IntegerContext(NumericBuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.NumericBuiltinTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)


    class FloatContext(NumericBuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.NumericBuiltinTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat" ):
                listener.enterFloat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat" ):
                listener.exitFloat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat" ):
                return visitor.visitFloat(self)
            else:
                return visitor.visitChildren(self)


    class NumberContext(NumericBuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.NumericBuiltinTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)



    def numericBuiltinType(self):

        localctx = fstripsParser.NumericBuiltinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_numericBuiltinType)
        try:
            self.state = 255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fstripsParser.T__7]:
                localctx = fstripsParser.IntegerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self.match(fstripsParser.T__7)
                pass
            elif token in [fstripsParser.T__8]:
                localctx = fstripsParser.FloatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.match(fstripsParser.T__8)
                pass
            elif token in [fstripsParser.T__9]:
                localctx = fstripsParser.NumberContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 254
                self.match(fstripsParser.T__9)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BuiltinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_builtinType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ObjectBuiltinContext(BuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.BuiltinTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBuiltin" ):
                listener.enterObjectBuiltin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBuiltin" ):
                listener.exitObjectBuiltin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectBuiltin" ):
                return visitor.visitObjectBuiltin(self)
            else:
                return visitor.visitChildren(self)


    class NumericBuiltinContext(BuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.BuiltinTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numericBuiltinType(self):
            return self.getTypedRuleContext(fstripsParser.NumericBuiltinTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericBuiltin" ):
                listener.enterNumericBuiltin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericBuiltin" ):
                listener.exitNumericBuiltin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericBuiltin" ):
                return visitor.visitNumericBuiltin(self)
            else:
                return visitor.visitChildren(self)



    def builtinType(self):

        localctx = fstripsParser.BuiltinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_builtinType)
        try:
            self.state = 259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fstripsParser.T__7, fstripsParser.T__8, fstripsParser.T__9]:
                localctx = fstripsParser.NumericBuiltinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 257
                self.numericBuiltinType()
                pass
            elif token in [fstripsParser.T__10]:
                localctx = fstripsParser.ObjectBuiltinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 258
                self.match(fstripsParser.T__10)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(fstripsParser.NAME)
            else:
                return self.getToken(fstripsParser.NAME, i)

        def getRuleIndex(self):
            return fstripsParser.RULE_nameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameList" ):
                listener.enterNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameList" ):
                listener.exitNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameList" ):
                return visitor.visitNameList(self)
            else:
                return visitor.visitChildren(self)




    def nameList(self):

        localctx = fstripsParser.NameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_nameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fstripsParser.NAME:
                self.state = 261
                self.match(fstripsParser.NAME)
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_typedNameList

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleNameListContext(TypedNameListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.TypedNameListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nameList(self):
            return self.getTypedRuleContext(fstripsParser.NameListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameList" ):
                listener.enterSimpleNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameList" ):
                listener.exitSimpleNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleNameList" ):
                return visitor.visitSimpleNameList(self)
            else:
                return visitor.visitChildren(self)


    class ComplexNameListContext(TypedNameListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.TypedNameListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nameList(self):
            return self.getTypedRuleContext(fstripsParser.NameListContext,0)

        def nameListWithType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.NameListWithTypeContext)
            else:
                return self.getTypedRuleContext(fstripsParser.NameListWithTypeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexNameList" ):
                listener.enterComplexNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexNameList" ):
                listener.exitComplexNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexNameList" ):
                return visitor.visitComplexNameList(self)
            else:
                return visitor.visitChildren(self)



    def typedNameList(self):

        localctx = fstripsParser.TypedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typedNameList)
        try:
            self.state = 275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.SimpleNameListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 267
                self.nameList()
                pass

            elif la_ == 2:
                localctx = fstripsParser.ComplexNameListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 269 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 268
                        self.nameListWithType()

                    else:
                        raise NoViableAltException(self)
                    self.state = 271 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 273
                self.nameList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameListWithTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.theType = None # TypenameContext

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def nameList(self):
            return self.getTypedRuleContext(fstripsParser.NameListContext,0)


        def typename(self):
            return self.getTypedRuleContext(fstripsParser.TypenameContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_nameListWithType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameListWithType" ):
                listener.enterNameListWithType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameListWithType" ):
                listener.exitNameListWithType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameListWithType" ):
                return visitor.visitNameListWithType(self)
            else:
                return visitor.visitChildren(self)




    def nameListWithType(self):

        localctx = fstripsParser.NameListWithTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_nameListWithType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(fstripsParser.NAME)
            self.state = 278
            self.nameList()
            self.state = 279
            self.match(fstripsParser.T__11)
            self.state = 280
            localctx.theType = self.typename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.PrimTypeContext)
            else:
                return self.getTypedRuleContext(fstripsParser.PrimTypeContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_typename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypename" ):
                listener.enterTypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypename" ):
                listener.exitTypename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypename" ):
                return visitor.visitTypename(self)
            else:
                return visitor.visitChildren(self)




    def typename(self):

        localctx = fstripsParser.TypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typename)
        self._la = 0 # Token type
        try:
            self.state = 292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fstripsParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 282
                self.match(fstripsParser.T__0)
                self.state = 283
                self.match(fstripsParser.T__12)
                self.state = 285 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 284
                    self.primType()
                    self.state = 287 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fstripsParser.T__7) | (1 << fstripsParser.T__8) | (1 << fstripsParser.T__9) | (1 << fstripsParser.T__10))) != 0) or _la==fstripsParser.NAME):
                        break

                self.state = 289
                self.match(fstripsParser.T__2)
                pass
            elif token in [fstripsParser.T__7, fstripsParser.T__8, fstripsParser.T__9, fstripsParser.T__10, fstripsParser.NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 291
                self.primType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def builtinType(self):
            return self.getTypedRuleContext(fstripsParser.BuiltinTypeContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_primType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimType" ):
                listener.enterPrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimType" ):
                listener.exitPrimType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimType" ):
                return visitor.visitPrimType(self)
            else:
                return visitor.visitChildren(self)




    def primType(self):

        localctx = fstripsParser.PrimTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_primType)
        try:
            self.state = 296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fstripsParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 294
                self.match(fstripsParser.NAME)
                pass
            elif token in [fstripsParser.T__7, fstripsParser.T__8, fstripsParser.T__9, fstripsParser.T__10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 295
                self.builtinType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionsDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.FunctionDeclGroupContext)
            else:
                return self.getTypedRuleContext(fstripsParser.FunctionDeclGroupContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_functionsDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionsDef" ):
                listener.enterFunctionsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionsDef" ):
                listener.exitFunctionsDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionsDef" ):
                return visitor.visitFunctionsDef(self)
            else:
                return visitor.visitChildren(self)




    def functionsDef(self):

        localctx = fstripsParser.FunctionsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_functionsDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(fstripsParser.T__0)
            self.state = 299
            self.match(fstripsParser.T__13)
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fstripsParser.T__0:
                self.state = 300
                self.functionDeclGroup()
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 306
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDeclGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primType(self):
            return self.getTypedRuleContext(fstripsParser.PrimTypeContext,0)


        def atomicFunctionSkeleton(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.AtomicFunctionSkeletonContext)
            else:
                return self.getTypedRuleContext(fstripsParser.AtomicFunctionSkeletonContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_functionDeclGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclGroup" ):
                listener.enterFunctionDeclGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclGroup" ):
                listener.exitFunctionDeclGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclGroup" ):
                return visitor.visitFunctionDeclGroup(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclGroup(self):

        localctx = fstripsParser.FunctionDeclGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_functionDeclGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 308
                self.atomicFunctionSkeleton()
                self.state = 311 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==fstripsParser.T__0):
                    break

            self.state = 313
            self.match(fstripsParser.T__11)
            self.state = 314
            self.primType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicFunctionSkeletonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(fstripsParser.FunctionSymbolContext,0)


        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_atomicFunctionSkeleton

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicFunctionSkeleton" ):
                listener.enterAtomicFunctionSkeleton(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicFunctionSkeleton" ):
                listener.exitAtomicFunctionSkeleton(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicFunctionSkeleton" ):
                return visitor.visitAtomicFunctionSkeleton(self)
            else:
                return visitor.visitChildren(self)




    def atomicFunctionSkeleton(self):

        localctx = fstripsParser.AtomicFunctionSkeletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_atomicFunctionSkeleton)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(fstripsParser.T__0)
            self.state = 317
            self.functionSymbol()
            self.state = 318
            self.variableList()
            self.state = 319
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def EXTNAME(self):
            return self.getToken(fstripsParser.EXTNAME, 0)

        def getRuleIndex(self):
            return fstripsParser.RULE_functionSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSymbol" ):
                listener.enterFunctionSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSymbol" ):
                listener.exitFunctionSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionSymbol" ):
                return visitor.visitFunctionSymbol(self)
            else:
                return visitor.visitChildren(self)




    def functionSymbol(self):

        localctx = fstripsParser.FunctionSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            _la = self._input.LA(1)
            if not(_la==fstripsParser.NAME or _la==fstripsParser.EXTNAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantsDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(fstripsParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_constantsDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantsDef" ):
                listener.enterConstantsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantsDef" ):
                listener.exitConstantsDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantsDef" ):
                return visitor.visitConstantsDef(self)
            else:
                return visitor.visitChildren(self)




    def constantsDef(self):

        localctx = fstripsParser.ConstantsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_constantsDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(fstripsParser.T__0)
            self.state = 324
            self.match(fstripsParser.T__14)
            self.state = 325
            self.typedNameList()
            self.state = 326
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicatesDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicFormulaSkeleton(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.AtomicFormulaSkeletonContext)
            else:
                return self.getTypedRuleContext(fstripsParser.AtomicFormulaSkeletonContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_predicatesDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicatesDef" ):
                listener.enterPredicatesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicatesDef" ):
                listener.exitPredicatesDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicatesDef" ):
                return visitor.visitPredicatesDef(self)
            else:
                return visitor.visitChildren(self)




    def predicatesDef(self):

        localctx = fstripsParser.PredicatesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_predicatesDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(fstripsParser.T__0)
            self.state = 329
            self.match(fstripsParser.T__15)
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fstripsParser.T__0:
                self.state = 330
                self.atomicFormulaSkeleton()
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 336
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicFormulaSkeletonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(fstripsParser.PredicateContext,0)


        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_atomicFormulaSkeleton

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicFormulaSkeleton" ):
                listener.enterAtomicFormulaSkeleton(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicFormulaSkeleton" ):
                listener.exitAtomicFormulaSkeleton(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicFormulaSkeleton" ):
                return visitor.visitAtomicFormulaSkeleton(self)
            else:
                return visitor.visitChildren(self)




    def atomicFormulaSkeleton(self):

        localctx = fstripsParser.AtomicFormulaSkeletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_atomicFormulaSkeleton)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(fstripsParser.T__0)
            self.state = 339
            self.predicate()
            self.state = 340
            self.variableList()
            self.state = 341
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def getRuleIndex(self):
            return fstripsParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = fstripsParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(fstripsParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_variableList

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UntypedVariableListContext(VariableListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.VariableListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(fstripsParser.VARIABLE)
            else:
                return self.getToken(fstripsParser.VARIABLE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedVariableList" ):
                listener.enterUntypedVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedVariableList" ):
                listener.exitUntypedVariableList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedVariableList" ):
                return visitor.visitUntypedVariableList(self)
            else:
                return visitor.visitChildren(self)


    class TypedVariableListContext(VariableListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.VariableListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variableListWithType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.VariableListWithTypeContext)
            else:
                return self.getTypedRuleContext(fstripsParser.VariableListWithTypeContext,i)

        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(fstripsParser.VARIABLE)
            else:
                return self.getToken(fstripsParser.VARIABLE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedVariableList" ):
                listener.enterTypedVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedVariableList" ):
                listener.exitTypedVariableList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedVariableList" ):
                return visitor.visitTypedVariableList(self)
            else:
                return visitor.visitChildren(self)



    def variableList(self):

        localctx = fstripsParser.VariableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_variableList)
        self._la = 0 # Token type
        try:
            self.state = 362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.UntypedVariableListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fstripsParser.VARIABLE:
                    self.state = 345
                    self.match(fstripsParser.VARIABLE)
                    self.state = 350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = fstripsParser.TypedVariableListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 352 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 351
                        self.variableListWithType()

                    else:
                        raise NoViableAltException(self)
                    self.state = 354 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fstripsParser.VARIABLE:
                    self.state = 356
                    self.match(fstripsParser.VARIABLE)
                    self.state = 361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableListWithTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primType(self):
            return self.getTypedRuleContext(fstripsParser.PrimTypeContext,0)


        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(fstripsParser.VARIABLE)
            else:
                return self.getToken(fstripsParser.VARIABLE, i)

        def getRuleIndex(self):
            return fstripsParser.RULE_variableListWithType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableListWithType" ):
                listener.enterVariableListWithType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableListWithType" ):
                listener.exitVariableListWithType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableListWithType" ):
                return visitor.visitVariableListWithType(self)
            else:
                return visitor.visitChildren(self)




    def variableListWithType(self):

        localctx = fstripsParser.VariableListWithTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_variableListWithType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 364
                self.match(fstripsParser.VARIABLE)
                self.state = 367 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==fstripsParser.VARIABLE):
                    break

            self.state = 369
            self.match(fstripsParser.T__11)
            self.state = 370
            self.primType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructureDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionDef(self):
            return self.getTypedRuleContext(fstripsParser.ActionDefContext,0)


        def eventDef(self):
            return self.getTypedRuleContext(fstripsParser.EventDefContext,0)


        def durativeActionDef(self):
            return self.getTypedRuleContext(fstripsParser.DurativeActionDefContext,0)


        def derivedDef(self):
            return self.getTypedRuleContext(fstripsParser.DerivedDefContext,0)


        def constraintDef(self):
            return self.getTypedRuleContext(fstripsParser.ConstraintDefContext,0)


        def processDef(self):
            return self.getTypedRuleContext(fstripsParser.ProcessDefContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_structureDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureDef" ):
                listener.enterStructureDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureDef" ):
                listener.exitStructureDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructureDef" ):
                return visitor.visitStructureDef(self)
            else:
                return visitor.visitChildren(self)




    def structureDef(self):

        localctx = fstripsParser.StructureDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_structureDef)
        try:
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 372
                self.actionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 373
                self.eventDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 374
                self.durativeActionDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 375
                self.derivedDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 376
                self.constraintDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 377
                self.processDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionName(self):
            return self.getTypedRuleContext(fstripsParser.ActionNameContext,0)


        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)


        def actionDefBody(self):
            return self.getTypedRuleContext(fstripsParser.ActionDefBodyContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_actionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionDef" ):
                listener.enterActionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionDef" ):
                listener.exitActionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActionDef" ):
                return visitor.visitActionDef(self)
            else:
                return visitor.visitChildren(self)




    def actionDef(self):

        localctx = fstripsParser.ActionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_actionDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(fstripsParser.T__0)
            self.state = 381
            self.match(fstripsParser.T__16)
            self.state = 382
            self.actionName()
            self.state = 383
            self.match(fstripsParser.T__17)
            self.state = 384
            self.match(fstripsParser.T__0)
            self.state = 385
            self.variableList()
            self.state = 386
            self.match(fstripsParser.T__2)
            self.state = 387
            self.actionDefBody()
            self.state = 388
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraintSymbol(self):
            return self.getTypedRuleContext(fstripsParser.ConstraintSymbolContext,0)


        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_constraintDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintDef" ):
                listener.enterConstraintDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintDef" ):
                listener.exitConstraintDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraintDef" ):
                return visitor.visitConstraintDef(self)
            else:
                return visitor.visitChildren(self)




    def constraintDef(self):

        localctx = fstripsParser.ConstraintDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constraintDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(fstripsParser.T__0)
            self.state = 391
            self.match(fstripsParser.T__18)
            self.state = 392
            self.constraintSymbol()
            self.state = 393
            self.match(fstripsParser.T__17)
            self.state = 394
            self.match(fstripsParser.T__0)
            self.state = 395
            self.variableList()
            self.state = 396
            self.match(fstripsParser.T__2)
            self.state = 397
            self.match(fstripsParser.T__19)
            self.state = 398
            self.goalDesc()
            self.state = 399
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventSymbol(self):
            return self.getTypedRuleContext(fstripsParser.EventSymbolContext,0)


        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)


        def actionDefBody(self):
            return self.getTypedRuleContext(fstripsParser.ActionDefBodyContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_eventDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDef" ):
                listener.enterEventDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDef" ):
                listener.exitEventDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDef" ):
                return visitor.visitEventDef(self)
            else:
                return visitor.visitChildren(self)




    def eventDef(self):

        localctx = fstripsParser.EventDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_eventDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(fstripsParser.T__0)
            self.state = 402
            self.match(fstripsParser.T__20)
            self.state = 403
            self.eventSymbol()
            self.state = 404
            self.match(fstripsParser.T__17)
            self.state = 405
            self.match(fstripsParser.T__0)
            self.state = 406
            self.variableList()
            self.state = 407
            self.match(fstripsParser.T__2)
            self.state = 408
            self.actionDefBody()
            self.state = 409
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def EXTNAME(self):
            return self.getToken(fstripsParser.EXTNAME, 0)

        def getRuleIndex(self):
            return fstripsParser.RULE_actionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionName" ):
                listener.enterActionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionName" ):
                listener.exitActionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActionName" ):
                return visitor.visitActionName(self)
            else:
                return visitor.visitChildren(self)




    def actionName(self):

        localctx = fstripsParser.ActionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_actionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            _la = self._input.LA(1)
            if not(_la==fstripsParser.NAME or _la==fstripsParser.EXTNAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def getRuleIndex(self):
            return fstripsParser.RULE_constraintSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintSymbol" ):
                listener.enterConstraintSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintSymbol" ):
                listener.exitConstraintSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraintSymbol" ):
                return visitor.visitConstraintSymbol(self)
            else:
                return visitor.visitChildren(self)




    def constraintSymbol(self):

        localctx = fstripsParser.ConstraintSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_constraintSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(fstripsParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def EXTNAME(self):
            return self.getToken(fstripsParser.EXTNAME, 0)

        def getRuleIndex(self):
            return fstripsParser.RULE_eventSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventSymbol" ):
                listener.enterEventSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventSymbol" ):
                listener.exitEventSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventSymbol" ):
                return visitor.visitEventSymbol(self)
            else:
                return visitor.visitChildren(self)




    def eventSymbol(self):

        localctx = fstripsParser.EventSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_eventSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            _la = self._input.LA(1)
            if not(_la==fstripsParser.NAME or _la==fstripsParser.EXTNAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRECONDITION(self):
            return self.getToken(fstripsParser.K_PRECONDITION, 0)

        def precondition(self):
            return self.getTypedRuleContext(fstripsParser.PreconditionContext,0)


        def K_EFFECT(self):
            return self.getToken(fstripsParser.K_EFFECT, 0)

        def effect(self):
            return self.getTypedRuleContext(fstripsParser.EffectContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_actionDefBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionDefBody" ):
                listener.enterActionDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionDefBody" ):
                listener.exitActionDefBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActionDefBody" ):
                return visitor.visitActionDefBody(self)
            else:
                return visitor.visitChildren(self)




    def actionDefBody(self):

        localctx = fstripsParser.ActionDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_actionDefBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(fstripsParser.K_PRECONDITION)
            self.state = 418
            self.precondition()
            self.state = 419
            self.match(fstripsParser.K_EFFECT)
            self.state = 420
            self.effect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreconditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_precondition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularPreconditionContext(PreconditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.PreconditionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularPrecondition" ):
                listener.enterRegularPrecondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularPrecondition" ):
                listener.exitRegularPrecondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegularPrecondition" ):
                return visitor.visitRegularPrecondition(self)
            else:
                return visitor.visitChildren(self)


    class TrivialPreconditionContext(PreconditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.PreconditionContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrivialPrecondition" ):
                listener.enterTrivialPrecondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrivialPrecondition" ):
                listener.exitTrivialPrecondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrivialPrecondition" ):
                return visitor.visitTrivialPrecondition(self)
            else:
                return visitor.visitChildren(self)



    def precondition(self):

        localctx = fstripsParser.PreconditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_precondition)
        try:
            self.state = 425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.TrivialPreconditionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 422
                self.match(fstripsParser.T__0)
                self.state = 423
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = fstripsParser.RegularPreconditionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 424
                self.goalDesc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoalDescContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_goalDesc

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AndGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GoalDescContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(fstripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndGoalDesc" ):
                listener.enterAndGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndGoalDesc" ):
                listener.exitAndGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndGoalDesc" ):
                return visitor.visitAndGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class OrGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GoalDescContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(fstripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrGoalDesc" ):
                listener.enterOrGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrGoalDesc" ):
                listener.exitOrGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrGoalDesc" ):
                return visitor.visitOrGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class EqualityGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GoalDescContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def equality(self):
            return self.getTypedRuleContext(fstripsParser.EqualityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityGoalDesc" ):
                listener.enterEqualityGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityGoalDesc" ):
                listener.exitEqualityGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityGoalDesc" ):
                return visitor.visitEqualityGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class UniversalGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GoalDescContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniversalGoalDesc" ):
                listener.enterUniversalGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniversalGoalDesc" ):
                listener.exitUniversalGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniversalGoalDesc" ):
                return visitor.visitUniversalGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GoalDescContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fComp(self):
            return self.getTypedRuleContext(fstripsParser.FCompContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonGoalDesc" ):
                listener.enterComparisonGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonGoalDesc" ):
                listener.exitComparisonGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonGoalDesc" ):
                return visitor.visitComparisonGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class TermGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GoalDescContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atomicTermFormula(self):
            return self.getTypedRuleContext(fstripsParser.AtomicTermFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermGoalDesc" ):
                listener.enterTermGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermGoalDesc" ):
                listener.exitTermGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermGoalDesc" ):
                return visitor.visitTermGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class ExistentialGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GoalDescContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistentialGoalDesc" ):
                listener.enterExistentialGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistentialGoalDesc" ):
                listener.exitExistentialGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistentialGoalDesc" ):
                return visitor.visitExistentialGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class NotGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GoalDescContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotGoalDesc" ):
                listener.enterNotGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotGoalDesc" ):
                listener.exitNotGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotGoalDesc" ):
                return visitor.visitNotGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class ImplyGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GoalDescContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(fstripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplyGoalDesc" ):
                listener.enterImplyGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplyGoalDesc" ):
                listener.exitImplyGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplyGoalDesc" ):
                return visitor.visitImplyGoalDesc(self)
            else:
                return visitor.visitChildren(self)



    def goalDesc(self):

        localctx = fstripsParser.GoalDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_goalDesc)
        self._la = 0 # Token type
        try:
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.TermGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.atomicTermFormula()
                pass

            elif la_ == 2:
                localctx = fstripsParser.AndGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.match(fstripsParser.T__0)
                self.state = 429
                self.match(fstripsParser.T__21)
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fstripsParser.T__0:
                    self.state = 430
                    self.goalDesc()
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 436
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = fstripsParser.OrGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 437
                self.match(fstripsParser.T__0)
                self.state = 438
                self.match(fstripsParser.T__22)
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fstripsParser.T__0:
                    self.state = 439
                    self.goalDesc()
                    self.state = 444
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 445
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = fstripsParser.NotGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 446
                self.match(fstripsParser.T__0)
                self.state = 447
                self.match(fstripsParser.T__23)
                self.state = 448
                self.goalDesc()
                self.state = 449
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 5:
                localctx = fstripsParser.ImplyGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 451
                self.match(fstripsParser.T__0)
                self.state = 452
                self.match(fstripsParser.T__24)
                self.state = 453
                self.goalDesc()
                self.state = 454
                self.goalDesc()
                self.state = 455
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 6:
                localctx = fstripsParser.ExistentialGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 457
                self.match(fstripsParser.T__0)
                self.state = 458
                self.match(fstripsParser.T__25)
                self.state = 459
                self.match(fstripsParser.T__0)
                self.state = 460
                self.variableList()
                self.state = 461
                self.match(fstripsParser.T__2)
                self.state = 462
                self.goalDesc()
                self.state = 463
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 7:
                localctx = fstripsParser.UniversalGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 465
                self.match(fstripsParser.T__0)
                self.state = 466
                self.match(fstripsParser.T__26)
                self.state = 467
                self.match(fstripsParser.T__0)
                self.state = 468
                self.variableList()
                self.state = 469
                self.match(fstripsParser.T__2)
                self.state = 470
                self.goalDesc()
                self.state = 471
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 8:
                localctx = fstripsParser.ComparisonGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 473
                self.fComp()
                pass

            elif la_ == 9:
                localctx = fstripsParser.EqualityGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 474
                self.equality()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.TermContext)
            else:
                return self.getTypedRuleContext(fstripsParser.TermContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_equality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality" ):
                listener.enterEquality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality" ):
                listener.exitEquality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEquality" ):
                return visitor.visitEquality(self)
            else:
                return visitor.visitChildren(self)




    def equality(self):

        localctx = fstripsParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_equality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(fstripsParser.T__0)
            self.state = 478
            self.match(fstripsParser.T__27)
            self.state = 479
            self.term()
            self.state = 480
            self.term()
            self.state = 481
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FCompContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryComp(self):
            return self.getTypedRuleContext(fstripsParser.BinaryCompContext,0)


        def fExp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.FExpContext)
            else:
                return self.getTypedRuleContext(fstripsParser.FExpContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_fComp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFComp" ):
                listener.enterFComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFComp" ):
                listener.exitFComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFComp" ):
                return visitor.visitFComp(self)
            else:
                return visitor.visitChildren(self)




    def fComp(self):

        localctx = fstripsParser.FCompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fComp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(fstripsParser.T__0)
            self.state = 484
            self.binaryComp()
            self.state = 485
            self.fExp()
            self.state = 486
            self.fExp()
            self.state = 487
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicTermFormulaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(fstripsParser.PredicateContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.TermContext)
            else:
                return self.getTypedRuleContext(fstripsParser.TermContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_atomicTermFormula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTermFormula" ):
                listener.enterAtomicTermFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTermFormula" ):
                listener.exitAtomicTermFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicTermFormula" ):
                return visitor.visitAtomicTermFormula(self)
            else:
                return visitor.visitChildren(self)




    def atomicTermFormula(self):

        localctx = fstripsParser.AtomicTermFormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_atomicTermFormula)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(fstripsParser.T__0)
            self.state = 490
            self.predicate()
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fstripsParser.T__0 or _la==fstripsParser.T__28 or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (fstripsParser.NAME - 92)) | (1 << (fstripsParser.VARIABLE - 92)) | (1 << (fstripsParser.NUMBER - 92)))) != 0):
                self.state = 491
                self.term()
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 497
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_term

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TermObjectContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermObject" ):
                listener.enterTermObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermObject" ):
                listener.exitTermObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermObject" ):
                return visitor.visitTermObject(self)
            else:
                return visitor.visitChildren(self)


    class TermTimeStepContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermTimeStep" ):
                listener.enterTermTimeStep(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermTimeStep" ):
                listener.exitTermTimeStep(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermTimeStep" ):
                return visitor.visitTermTimeStep(self)
            else:
                return visitor.visitChildren(self)


    class TermFunctionContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(fstripsParser.FunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermFunction" ):
                listener.enterTermFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermFunction" ):
                listener.exitTermFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermFunction" ):
                return visitor.visitTermFunction(self)
            else:
                return visitor.visitChildren(self)


    class TermVariableContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE(self):
            return self.getToken(fstripsParser.VARIABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermVariable" ):
                listener.enterTermVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermVariable" ):
                listener.exitTermVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermVariable" ):
                return visitor.visitTermVariable(self)
            else:
                return visitor.visitChildren(self)


    class TermNumberContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(fstripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermNumber" ):
                listener.enterTermNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermNumber" ):
                listener.exitTermNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermNumber" ):
                return visitor.visitTermNumber(self)
            else:
                return visitor.visitChildren(self)



    def term(self):

        localctx = fstripsParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_term)
        try:
            self.state = 504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fstripsParser.NAME]:
                localctx = fstripsParser.TermObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 499
                self.match(fstripsParser.NAME)
                pass
            elif token in [fstripsParser.NUMBER]:
                localctx = fstripsParser.TermNumberContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 500
                self.match(fstripsParser.NUMBER)
                pass
            elif token in [fstripsParser.VARIABLE]:
                localctx = fstripsParser.TermVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 501
                self.match(fstripsParser.VARIABLE)
                pass
            elif token in [fstripsParser.T__28]:
                localctx = fstripsParser.TermTimeStepContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 502
                self.match(fstripsParser.T__28)
                pass
            elif token in [fstripsParser.T__0]:
                localctx = fstripsParser.TermFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 503
                self.functionTerm()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_functionTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnaryArithmeticFunctionTermContext(FunctionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.FunctionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryBuiltIn(self):
            return self.getTypedRuleContext(fstripsParser.UnaryBuiltInContext,0)

        def term(self):
            return self.getTypedRuleContext(fstripsParser.TermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryArithmeticFunctionTerm" ):
                listener.enterUnaryArithmeticFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryArithmeticFunctionTerm" ):
                listener.exitUnaryArithmeticFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryArithmeticFunctionTerm" ):
                return visitor.visitUnaryArithmeticFunctionTerm(self)
            else:
                return visitor.visitChildren(self)


    class BinaryArithmeticFunctionTermContext(FunctionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.FunctionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def binaryOp(self):
            return self.getTypedRuleContext(fstripsParser.BinaryOpContext,0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.TermContext)
            else:
                return self.getTypedRuleContext(fstripsParser.TermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryArithmeticFunctionTerm" ):
                listener.enterBinaryArithmeticFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryArithmeticFunctionTerm" ):
                listener.exitBinaryArithmeticFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryArithmeticFunctionTerm" ):
                return visitor.visitBinaryArithmeticFunctionTerm(self)
            else:
                return visitor.visitChildren(self)


    class GenericFunctionTermContext(FunctionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.FunctionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionSymbol(self):
            return self.getTypedRuleContext(fstripsParser.FunctionSymbolContext,0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.TermContext)
            else:
                return self.getTypedRuleContext(fstripsParser.TermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFunctionTerm" ):
                listener.enterGenericFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFunctionTerm" ):
                listener.exitGenericFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericFunctionTerm" ):
                return visitor.visitGenericFunctionTerm(self)
            else:
                return visitor.visitChildren(self)



    def functionTerm(self):

        localctx = fstripsParser.FunctionTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_functionTerm)
        self._la = 0 # Token type
        try:
            self.state = 527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.GenericFunctionTermContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.match(fstripsParser.T__0)
                self.state = 507
                self.functionSymbol()
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fstripsParser.T__0 or _la==fstripsParser.T__28 or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (fstripsParser.NAME - 92)) | (1 << (fstripsParser.VARIABLE - 92)) | (1 << (fstripsParser.NUMBER - 92)))) != 0):
                    self.state = 508
                    self.term()
                    self.state = 513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 514
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = fstripsParser.BinaryArithmeticFunctionTermContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 516
                self.match(fstripsParser.T__0)
                self.state = 517
                self.binaryOp()
                self.state = 518
                self.term()
                self.state = 519
                self.term()
                self.state = 520
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = fstripsParser.UnaryArithmeticFunctionTermContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.match(fstripsParser.T__0)
                self.state = 523
                self.unaryBuiltIn()
                self.state = 524
                self.term()
                self.state = 525
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionName(self):
            return self.getTypedRuleContext(fstripsParser.ActionNameContext,0)


        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)


        def processDefBody(self):
            return self.getTypedRuleContext(fstripsParser.ProcessDefBodyContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_processDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessDef" ):
                listener.enterProcessDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessDef" ):
                listener.exitProcessDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessDef" ):
                return visitor.visitProcessDef(self)
            else:
                return visitor.visitChildren(self)




    def processDef(self):

        localctx = fstripsParser.ProcessDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_processDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.match(fstripsParser.T__0)
            self.state = 530
            self.match(fstripsParser.T__29)
            self.state = 531
            self.actionName()
            self.state = 532
            self.match(fstripsParser.T__17)
            self.state = 533
            self.match(fstripsParser.T__0)
            self.state = 534
            self.variableList()
            self.state = 535
            self.match(fstripsParser.T__2)
            self.state = 536
            self.processDefBody()
            self.state = 537
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRECONDITION(self):
            return self.getToken(fstripsParser.K_PRECONDITION, 0)

        def precondition(self):
            return self.getTypedRuleContext(fstripsParser.PreconditionContext,0)


        def K_EFFECT(self):
            return self.getToken(fstripsParser.K_EFFECT, 0)

        def processEffectList(self):
            return self.getTypedRuleContext(fstripsParser.ProcessEffectListContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_processDefBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessDefBody" ):
                listener.enterProcessDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessDefBody" ):
                listener.exitProcessDefBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessDefBody" ):
                return visitor.visitProcessDefBody(self)
            else:
                return visitor.visitChildren(self)




    def processDefBody(self):

        localctx = fstripsParser.ProcessDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_processDefBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(fstripsParser.K_PRECONDITION)
            self.state = 540
            self.precondition()
            self.state = 541
            self.match(fstripsParser.K_EFFECT)
            self.state = 542
            self.processEffectList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_processEffectList

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ProcessSingleEffectContext(ProcessEffectListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ProcessEffectListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def processEffect(self):
            return self.getTypedRuleContext(fstripsParser.ProcessEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessSingleEffect" ):
                listener.enterProcessSingleEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessSingleEffect" ):
                listener.exitProcessSingleEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessSingleEffect" ):
                return visitor.visitProcessSingleEffect(self)
            else:
                return visitor.visitChildren(self)


    class ProcessConjunctiveEffectFormulaContext(ProcessEffectListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ProcessEffectListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def processEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.ProcessEffectContext)
            else:
                return self.getTypedRuleContext(fstripsParser.ProcessEffectContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessConjunctiveEffectFormula" ):
                listener.enterProcessConjunctiveEffectFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessConjunctiveEffectFormula" ):
                listener.exitProcessConjunctiveEffectFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessConjunctiveEffectFormula" ):
                return visitor.visitProcessConjunctiveEffectFormula(self)
            else:
                return visitor.visitChildren(self)



    def processEffectList(self):

        localctx = fstripsParser.ProcessEffectListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_processEffectList)
        self._la = 0 # Token type
        try:
            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.ProcessConjunctiveEffectFormulaContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 544
                self.match(fstripsParser.T__0)
                self.state = 545
                self.match(fstripsParser.T__21)
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fstripsParser.T__0:
                    self.state = 546
                    self.processEffect()
                    self.state = 551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 552
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = fstripsParser.ProcessSingleEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 553
                self.processEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_processEffect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ProcessAssignEffectContext(ProcessEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ProcessEffectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def processEffectOp(self):
            return self.getTypedRuleContext(fstripsParser.ProcessEffectOpContext,0)

        def functionTerm(self):
            return self.getTypedRuleContext(fstripsParser.FunctionTermContext,0)

        def processEffectExp(self):
            return self.getTypedRuleContext(fstripsParser.ProcessEffectExpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessAssignEffect" ):
                listener.enterProcessAssignEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessAssignEffect" ):
                listener.exitProcessAssignEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessAssignEffect" ):
                return visitor.visitProcessAssignEffect(self)
            else:
                return visitor.visitChildren(self)



    def processEffect(self):

        localctx = fstripsParser.ProcessEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_processEffect)
        try:
            localctx = fstripsParser.ProcessAssignEffectContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(fstripsParser.T__0)
            self.state = 557
            self.processEffectOp()
            self.state = 558
            self.functionTerm()
            self.state = 559
            self.processEffectExp()
            self.state = 560
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurativeActionDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionName(self):
            return self.getTypedRuleContext(fstripsParser.ActionNameContext,0)


        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)


        def daDefBody(self):
            return self.getTypedRuleContext(fstripsParser.DaDefBodyContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_durativeActionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurativeActionDef" ):
                listener.enterDurativeActionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurativeActionDef" ):
                listener.exitDurativeActionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDurativeActionDef" ):
                return visitor.visitDurativeActionDef(self)
            else:
                return visitor.visitChildren(self)




    def durativeActionDef(self):

        localctx = fstripsParser.DurativeActionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_durativeActionDef)
        try:
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 562
                self.match(fstripsParser.T__0)
                self.state = 563
                self.match(fstripsParser.T__30)
                self.state = 564
                self.actionName()
                self.state = 565
                self.match(fstripsParser.T__17)
                self.state = 566
                self.match(fstripsParser.T__0)
                self.state = 567
                self.variableList()
                self.state = 568
                self.match(fstripsParser.T__2)
                self.state = 569
                self.daDefBody()
                self.state = 570
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.match(fstripsParser.T__0)
                self.state = 573
                self.match(fstripsParser.T__30)
                self.state = 574
                self.actionName()
                self.state = 575
                self.match(fstripsParser.T__17)
                self.state = 576
                self.match(fstripsParser.T__0)
                self.state = 577
                self.match(fstripsParser.T__2)
                self.state = 578
                self.daDefBody()
                self.state = 579
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durationConstraint(self):
            return self.getTypedRuleContext(fstripsParser.DurationConstraintContext,0)


        def daGD(self):
            return self.getTypedRuleContext(fstripsParser.DaGDContext,0)


        def daEffect(self):
            return self.getTypedRuleContext(fstripsParser.DaEffectContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_daDefBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDaDefBody" ):
                listener.enterDaDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDaDefBody" ):
                listener.exitDaDefBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDaDefBody" ):
                return visitor.visitDaDefBody(self)
            else:
                return visitor.visitChildren(self)




    def daDefBody(self):

        localctx = fstripsParser.DaDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_daDefBody)
        try:
            self.state = 597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fstripsParser.T__31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.match(fstripsParser.T__31)
                self.state = 584
                self.durationConstraint()
                pass
            elif token in [fstripsParser.T__19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 585
                self.match(fstripsParser.T__19)
                self.state = 589
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 586
                    self.match(fstripsParser.T__0)
                    self.state = 587
                    self.match(fstripsParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 588
                    self.daGD()
                    pass


                pass
            elif token in [fstripsParser.K_EFFECT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 591
                self.match(fstripsParser.K_EFFECT)
                self.state = 595
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 592
                    self.match(fstripsParser.T__0)
                    self.state = 593
                    self.match(fstripsParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 594
                    self.daEffect()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefTimedGD(self):
            return self.getTypedRuleContext(fstripsParser.PrefTimedGDContext,0)


        def daGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.DaGDContext)
            else:
                return self.getTypedRuleContext(fstripsParser.DaGDContext,i)


        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_daGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDaGD" ):
                listener.enterDaGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDaGD" ):
                listener.exitDaGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDaGD" ):
                return visitor.visitDaGD(self)
            else:
                return visitor.visitChildren(self)




    def daGD(self):

        localctx = fstripsParser.DaGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_daGD)
        self._la = 0 # Token type
        try:
            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.prefTimedGD()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 600
                self.match(fstripsParser.T__0)
                self.state = 601
                self.match(fstripsParser.T__21)
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fstripsParser.T__0:
                    self.state = 602
                    self.daGD()
                    self.state = 607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 608
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 609
                self.match(fstripsParser.T__0)
                self.state = 610
                self.match(fstripsParser.T__26)
                self.state = 611
                self.match(fstripsParser.T__0)
                self.state = 612
                self.variableList()
                self.state = 613
                self.match(fstripsParser.T__2)
                self.state = 614
                self.daGD()
                self.state = 615
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefTimedGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timedGD(self):
            return self.getTypedRuleContext(fstripsParser.TimedGDContext,0)


        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def getRuleIndex(self):
            return fstripsParser.RULE_prefTimedGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefTimedGD" ):
                listener.enterPrefTimedGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefTimedGD" ):
                listener.exitPrefTimedGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefTimedGD" ):
                return visitor.visitPrefTimedGD(self)
            else:
                return visitor.visitChildren(self)




    def prefTimedGD(self):

        localctx = fstripsParser.PrefTimedGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_prefTimedGD)
        self._la = 0 # Token type
        try:
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 619
                self.timedGD()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.match(fstripsParser.T__0)
                self.state = 621
                self.match(fstripsParser.T__32)
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fstripsParser.NAME:
                    self.state = 622
                    self.match(fstripsParser.NAME)


                self.state = 625
                self.timedGD()
                self.state = 626
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimedGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeSpecifier(self):
            return self.getTypedRuleContext(fstripsParser.TimeSpecifierContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def interval(self):
            return self.getTypedRuleContext(fstripsParser.IntervalContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_timedGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimedGD" ):
                listener.enterTimedGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimedGD" ):
                listener.exitTimedGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimedGD" ):
                return visitor.visitTimedGD(self)
            else:
                return visitor.visitChildren(self)




    def timedGD(self):

        localctx = fstripsParser.TimedGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_timedGD)
        try:
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.match(fstripsParser.T__0)
                self.state = 631
                self.match(fstripsParser.T__33)
                self.state = 632
                self.timeSpecifier()
                self.state = 633
                self.goalDesc()
                self.state = 634
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 636
                self.match(fstripsParser.T__0)
                self.state = 637
                self.match(fstripsParser.T__34)
                self.state = 638
                self.interval()
                self.state = 639
                self.goalDesc()
                self.state = 640
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_timeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeSpecifier" ):
                listener.enterTimeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeSpecifier" ):
                listener.exitTimeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeSpecifier" ):
                return visitor.visitTimeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def timeSpecifier(self):

        localctx = fstripsParser.TimeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_timeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            _la = self._input.LA(1)
            if not(_la==fstripsParser.T__35 or _la==fstripsParser.T__36):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = fstripsParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(fstripsParser.T__37)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DerivedDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_derivedDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerivedDef" ):
                listener.enterDerivedDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerivedDef" ):
                listener.exitDerivedDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerivedDef" ):
                return visitor.visitDerivedDef(self)
            else:
                return visitor.visitChildren(self)




    def derivedDef(self):

        localctx = fstripsParser.DerivedDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_derivedDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(fstripsParser.T__0)
            self.state = 649
            self.match(fstripsParser.T__38)
            self.state = 650
            self.variableList()
            self.state = 651
            self.goalDesc()
            self.state = 652
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_fExp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FunctionExprContext(FExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.FExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(fstripsParser.FunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionExpr" ):
                listener.enterFunctionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionExpr" ):
                listener.exitFunctionExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionExpr" ):
                return visitor.visitFunctionExpr(self)
            else:
                return visitor.visitChildren(self)


    class NumericConstantExprContext(FExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.FExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(fstripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericConstantExpr" ):
                listener.enterNumericConstantExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericConstantExpr" ):
                listener.exitNumericConstantExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericConstantExpr" ):
                return visitor.visitNumericConstantExpr(self)
            else:
                return visitor.visitChildren(self)


    class VariableExprContext(FExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.FExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE(self):
            return self.getToken(fstripsParser.VARIABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableExpr" ):
                listener.enterVariableExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableExpr" ):
                listener.exitVariableExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableExpr" ):
                return visitor.visitVariableExpr(self)
            else:
                return visitor.visitChildren(self)



    def fExp(self):

        localctx = fstripsParser.FExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fExp)
        try:
            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fstripsParser.T__0]:
                localctx = fstripsParser.FunctionExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 654
                self.functionTerm()
                pass
            elif token in [fstripsParser.NUMBER]:
                localctx = fstripsParser.NumericConstantExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self.match(fstripsParser.NUMBER)
                pass
            elif token in [fstripsParser.VARIABLE]:
                localctx = fstripsParser.VariableExprContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 656
                self.match(fstripsParser.VARIABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_processEffectExp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FunctionalProcessEffectExprContext(ProcessEffectExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ProcessEffectExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def processFunctionEff(self):
            return self.getTypedRuleContext(fstripsParser.ProcessFunctionEffContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionalProcessEffectExpr" ):
                listener.enterFunctionalProcessEffectExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionalProcessEffectExpr" ):
                listener.exitFunctionalProcessEffectExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionalProcessEffectExpr" ):
                return visitor.visitFunctionalProcessEffectExpr(self)
            else:
                return visitor.visitChildren(self)


    class ConstProcessEffectExprContext(ProcessEffectExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ProcessEffectExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def processConstEff(self):
            return self.getTypedRuleContext(fstripsParser.ProcessConstEffContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstProcessEffectExpr" ):
                listener.enterConstProcessEffectExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstProcessEffectExpr" ):
                listener.exitConstProcessEffectExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstProcessEffectExpr" ):
                return visitor.visitConstProcessEffectExpr(self)
            else:
                return visitor.visitChildren(self)


    class VariableProcessEffectExprContext(ProcessEffectExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ProcessEffectExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def processVarEff(self):
            return self.getTypedRuleContext(fstripsParser.ProcessVarEffContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableProcessEffectExpr" ):
                listener.enterVariableProcessEffectExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableProcessEffectExpr" ):
                listener.exitVariableProcessEffectExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableProcessEffectExpr" ):
                return visitor.visitVariableProcessEffectExpr(self)
            else:
                return visitor.visitChildren(self)



    def processEffectExp(self):

        localctx = fstripsParser.ProcessEffectExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_processEffectExp)
        try:
            self.state = 674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.FunctionalProcessEffectExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.match(fstripsParser.T__0)
                self.state = 660
                self.match(fstripsParser.T__39)
                self.state = 661
                self.processFunctionEff()
                self.state = 662
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = fstripsParser.ConstProcessEffectExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 664
                self.match(fstripsParser.T__0)
                self.state = 665
                self.match(fstripsParser.T__39)
                self.state = 666
                self.processConstEff()
                self.state = 667
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = fstripsParser.VariableProcessEffectExprContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 669
                self.match(fstripsParser.T__0)
                self.state = 670
                self.match(fstripsParser.T__39)
                self.state = 671
                self.processVarEff()
                self.state = 672
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessFunctionEffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTerm(self):
            return self.getTypedRuleContext(fstripsParser.FunctionTermContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_processFunctionEff

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessFunctionEff" ):
                listener.enterProcessFunctionEff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessFunctionEff" ):
                listener.exitProcessFunctionEff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessFunctionEff" ):
                return visitor.visitProcessFunctionEff(self)
            else:
                return visitor.visitChildren(self)




    def processFunctionEff(self):

        localctx = fstripsParser.ProcessFunctionEffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_processFunctionEff)
        try:
            self.state = 681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fstripsParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 676
                self.functionTerm()
                self.state = 677
                self.match(fstripsParser.T__28)
                pass
            elif token in [fstripsParser.T__28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 679
                self.match(fstripsParser.T__28)
                self.state = 680
                self.functionTerm()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessConstEffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(fstripsParser.NUMBER, 0)

        def getRuleIndex(self):
            return fstripsParser.RULE_processConstEff

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessConstEff" ):
                listener.enterProcessConstEff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessConstEff" ):
                listener.exitProcessConstEff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessConstEff" ):
                return visitor.visitProcessConstEff(self)
            else:
                return visitor.visitChildren(self)




    def processConstEff(self):

        localctx = fstripsParser.ProcessConstEffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_processConstEff)
        try:
            self.state = 687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fstripsParser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 683
                self.match(fstripsParser.NUMBER)
                self.state = 684
                self.match(fstripsParser.T__28)
                pass
            elif token in [fstripsParser.T__28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 685
                self.match(fstripsParser.T__28)
                self.state = 686
                self.match(fstripsParser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessVarEffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(fstripsParser.VARIABLE, 0)

        def getRuleIndex(self):
            return fstripsParser.RULE_processVarEff

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessVarEff" ):
                listener.enterProcessVarEff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessVarEff" ):
                listener.exitProcessVarEff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessVarEff" ):
                return visitor.visitProcessVarEff(self)
            else:
                return visitor.visitChildren(self)




    def processVarEff(self):

        localctx = fstripsParser.ProcessVarEffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_processVarEff)
        try:
            self.state = 693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fstripsParser.VARIABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.match(fstripsParser.VARIABLE)
                self.state = 690
                self.match(fstripsParser.T__28)
                pass
            elif token in [fstripsParser.T__28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.match(fstripsParser.T__28)
                self.state = 692
                self.match(fstripsParser.VARIABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(fstripsParser.FunctionSymbolContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.TermContext)
            else:
                return self.getTypedRuleContext(fstripsParser.TermContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_fHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFHead" ):
                listener.enterFHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFHead" ):
                listener.exitFHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFHead" ):
                return visitor.visitFHead(self)
            else:
                return visitor.visitChildren(self)




    def fHead(self):

        localctx = fstripsParser.FHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_fHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(fstripsParser.T__0)
            self.state = 696
            self.functionSymbol()
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fstripsParser.T__0 or _la==fstripsParser.T__28 or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (fstripsParser.NAME - 92)) | (1 << (fstripsParser.VARIABLE - 92)) | (1 << (fstripsParser.NUMBER - 92)))) != 0):
                self.state = 697
                self.term()
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 703
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_effect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SingleEffectContext(EffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.EffectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cEffect(self):
            return self.getTypedRuleContext(fstripsParser.CEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleEffect" ):
                listener.enterSingleEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleEffect" ):
                listener.exitSingleEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleEffect" ):
                return visitor.visitSingleEffect(self)
            else:
                return visitor.visitChildren(self)


    class ConjunctiveEffectFormulaContext(EffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.EffectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.CEffectContext)
            else:
                return self.getTypedRuleContext(fstripsParser.CEffectContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunctiveEffectFormula" ):
                listener.enterConjunctiveEffectFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunctiveEffectFormula" ):
                listener.exitConjunctiveEffectFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunctiveEffectFormula" ):
                return visitor.visitConjunctiveEffectFormula(self)
            else:
                return visitor.visitChildren(self)



    def effect(self):

        localctx = fstripsParser.EffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_effect)
        self._la = 0 # Token type
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.ConjunctiveEffectFormulaContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 705
                self.match(fstripsParser.T__0)
                self.state = 706
                self.match(fstripsParser.T__21)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fstripsParser.T__0:
                    self.state = 707
                    self.cEffect()
                    self.state = 712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 713
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = fstripsParser.SingleEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.cEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_cEffect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SingleConditionalEffectContext(CEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.CEffectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)

        def atomic_effect(self):
            return self.getTypedRuleContext(fstripsParser.Atomic_effectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleConditionalEffect" ):
                listener.enterSingleConditionalEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleConditionalEffect" ):
                listener.exitSingleConditionalEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleConditionalEffect" ):
                return visitor.visitSingleConditionalEffect(self)
            else:
                return visitor.visitChildren(self)


    class MultipleConditionalEffectContext(CEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.CEffectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)

        def atomic_effect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.Atomic_effectContext)
            else:
                return self.getTypedRuleContext(fstripsParser.Atomic_effectContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleConditionalEffect" ):
                listener.enterMultipleConditionalEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleConditionalEffect" ):
                listener.exitMultipleConditionalEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleConditionalEffect" ):
                return visitor.visitMultipleConditionalEffect(self)
            else:
                return visitor.visitChildren(self)


    class UniversallyQuantifiedEffectContext(CEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.CEffectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)

        def effect(self):
            return self.getTypedRuleContext(fstripsParser.EffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniversallyQuantifiedEffect" ):
                listener.enterUniversallyQuantifiedEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniversallyQuantifiedEffect" ):
                listener.exitUniversallyQuantifiedEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniversallyQuantifiedEffect" ):
                return visitor.visitUniversallyQuantifiedEffect(self)
            else:
                return visitor.visitChildren(self)


    class AtomicEffectContext(CEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.CEffectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atomic_effect(self):
            return self.getTypedRuleContext(fstripsParser.Atomic_effectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicEffect" ):
                listener.enterAtomicEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicEffect" ):
                listener.exitAtomicEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicEffect" ):
                return visitor.visitAtomicEffect(self)
            else:
                return visitor.visitChildren(self)



    def cEffect(self):

        localctx = fstripsParser.CEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_cEffect)
        self._la = 0 # Token type
        try:
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.UniversallyQuantifiedEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 717
                self.match(fstripsParser.T__0)
                self.state = 718
                self.match(fstripsParser.T__26)
                self.state = 719
                self.match(fstripsParser.T__0)
                self.state = 720
                self.variableList()
                self.state = 721
                self.match(fstripsParser.T__2)
                self.state = 722
                self.effect()
                self.state = 723
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = fstripsParser.SingleConditionalEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 725
                self.match(fstripsParser.T__0)
                self.state = 726
                self.match(fstripsParser.T__40)
                self.state = 727
                self.goalDesc()
                self.state = 728
                self.atomic_effect()
                self.state = 729
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = fstripsParser.MultipleConditionalEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 731
                self.match(fstripsParser.T__0)
                self.state = 732
                self.match(fstripsParser.T__40)
                self.state = 733
                self.goalDesc()
                self.state = 734
                self.match(fstripsParser.T__0)
                self.state = 735
                self.match(fstripsParser.T__21)
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fstripsParser.T__0:
                    self.state = 736
                    self.atomic_effect()
                    self.state = 741
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 742
                self.match(fstripsParser.T__2)
                self.state = 743
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = fstripsParser.AtomicEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 745
                self.atomic_effect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atomic_effectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_atomic_effect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeleteAtomEffectContext(Atomic_effectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.Atomic_effectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atomicTermFormula(self):
            return self.getTypedRuleContext(fstripsParser.AtomicTermFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteAtomEffect" ):
                listener.enterDeleteAtomEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteAtomEffect" ):
                listener.exitDeleteAtomEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteAtomEffect" ):
                return visitor.visitDeleteAtomEffect(self)
            else:
                return visitor.visitChildren(self)


    class AssignEffectContext(Atomic_effectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.Atomic_effectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignOp(self):
            return self.getTypedRuleContext(fstripsParser.AssignOpContext,0)

        def functionTerm(self):
            return self.getTypedRuleContext(fstripsParser.FunctionTermContext,0)

        def fExp(self):
            return self.getTypedRuleContext(fstripsParser.FExpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignEffect" ):
                listener.enterAssignEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignEffect" ):
                listener.exitAssignEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignEffect" ):
                return visitor.visitAssignEffect(self)
            else:
                return visitor.visitChildren(self)


    class AssignConstantContext(Atomic_effectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.Atomic_effectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(fstripsParser.FunctionTermContext,0)

        def term(self):
            return self.getTypedRuleContext(fstripsParser.TermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignConstant" ):
                listener.enterAssignConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignConstant" ):
                listener.exitAssignConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignConstant" ):
                return visitor.visitAssignConstant(self)
            else:
                return visitor.visitChildren(self)


    class AddAtomEffectContext(Atomic_effectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.Atomic_effectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atomicTermFormula(self):
            return self.getTypedRuleContext(fstripsParser.AtomicTermFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddAtomEffect" ):
                listener.enterAddAtomEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddAtomEffect" ):
                listener.exitAddAtomEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddAtomEffect" ):
                return visitor.visitAddAtomEffect(self)
            else:
                return visitor.visitChildren(self)



    def atomic_effect(self):

        localctx = fstripsParser.Atomic_effectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_atomic_effect)
        try:
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.AssignEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.match(fstripsParser.T__0)
                self.state = 749
                self.assignOp()
                self.state = 750
                self.functionTerm()
                self.state = 751
                self.fExp()
                self.state = 752
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = fstripsParser.DeleteAtomEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 754
                self.match(fstripsParser.T__0)
                self.state = 755
                self.match(fstripsParser.T__23)
                self.state = 756
                self.atomicTermFormula()
                self.state = 757
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = fstripsParser.AddAtomEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 759
                self.atomicTermFormula()
                pass

            elif la_ == 4:
                localctx = fstripsParser.AssignConstantContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 760
                self.match(fstripsParser.T__0)
                self.state = 761
                self.match(fstripsParser.T__41)
                self.state = 762
                self.functionTerm()
                self.state = 763
                self.term()
                self.state = 764
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_binaryOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOp" ):
                listener.enterBinaryOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOp" ):
                listener.exitBinaryOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOp" ):
                return visitor.visitBinaryOp(self)
            else:
                return visitor.visitChildren(self)




    def binaryOp(self):

        localctx = fstripsParser.BinaryOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_binaryOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fstripsParser.T__11) | (1 << fstripsParser.T__39) | (1 << fstripsParser.T__42) | (1 << fstripsParser.T__43) | (1 << fstripsParser.T__44) | (1 << fstripsParser.T__45) | (1 << fstripsParser.T__46))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryBuiltInContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_unaryBuiltIn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryBuiltIn" ):
                listener.enterUnaryBuiltIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryBuiltIn" ):
                listener.exitUnaryBuiltIn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryBuiltIn" ):
                return visitor.visitUnaryBuiltIn(self)
            else:
                return visitor.visitChildren(self)




    def unaryBuiltIn(self):

        localctx = fstripsParser.UnaryBuiltInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_unaryBuiltIn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fstripsParser.T__11) | (1 << fstripsParser.T__47) | (1 << fstripsParser.T__48) | (1 << fstripsParser.T__49) | (1 << fstripsParser.T__50) | (1 << fstripsParser.T__51) | (1 << fstripsParser.T__52) | (1 << fstripsParser.T__53) | (1 << fstripsParser.T__54) | (1 << fstripsParser.T__55))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_multiOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiOp" ):
                listener.enterMultiOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiOp" ):
                listener.exitMultiOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiOp" ):
                return visitor.visitMultiOp(self)
            else:
                return visitor.visitChildren(self)




    def multiOp(self):

        localctx = fstripsParser.MultiOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_multiOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            _la = self._input.LA(1)
            if not(_la==fstripsParser.T__39 or _la==fstripsParser.T__42):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryCompContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_binaryComp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComp" ):
                listener.enterBinaryComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComp" ):
                listener.exitBinaryComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryComp" ):
                return visitor.visitBinaryComp(self)
            else:
                return visitor.visitChildren(self)




    def binaryComp(self):

        localctx = fstripsParser.BinaryCompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_binaryComp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fstripsParser.T__27) | (1 << fstripsParser.T__56) | (1 << fstripsParser.T__57) | (1 << fstripsParser.T__58) | (1 << fstripsParser.T__59))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_assignOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignOp" ):
                listener.enterAssignOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignOp" ):
                listener.exitAssignOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignOp" ):
                return visitor.visitAssignOp(self)
            else:
                return visitor.visitChildren(self)




    def assignOp(self):

        localctx = fstripsParser.AssignOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_assignOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            _la = self._input.LA(1)
            if not(((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & ((1 << (fstripsParser.T__41 - 42)) | (1 << (fstripsParser.T__60 - 42)) | (1 << (fstripsParser.T__61 - 42)) | (1 << (fstripsParser.T__62 - 42)) | (1 << (fstripsParser.T__63 - 42)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_processEffectOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessEffectOp" ):
                listener.enterProcessEffectOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessEffectOp" ):
                listener.exitProcessEffectOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessEffectOp" ):
                return visitor.visitProcessEffectOp(self)
            else:
                return visitor.visitChildren(self)




    def processEffectOp(self):

        localctx = fstripsParser.ProcessEffectOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_processEffectOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            _la = self._input.LA(1)
            if not(_la==fstripsParser.T__62 or _la==fstripsParser.T__63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDurationConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.SimpleDurationConstraintContext)
            else:
                return self.getTypedRuleContext(fstripsParser.SimpleDurationConstraintContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_durationConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationConstraint" ):
                listener.enterDurationConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationConstraint" ):
                listener.exitDurationConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDurationConstraint" ):
                return visitor.visitDurationConstraint(self)
            else:
                return visitor.visitChildren(self)




    def durationConstraint(self):

        localctx = fstripsParser.DurationConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_durationConstraint)
        self._la = 0 # Token type
        try:
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 780
                self.match(fstripsParser.T__0)
                self.state = 781
                self.match(fstripsParser.T__21)
                self.state = 783 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 782
                    self.simpleDurationConstraint()
                    self.state = 785 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fstripsParser.T__0):
                        break

                self.state = 787
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.match(fstripsParser.T__0)
                self.state = 790
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 791
                self.simpleDurationConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleDurationConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durOp(self):
            return self.getTypedRuleContext(fstripsParser.DurOpContext,0)


        def durValue(self):
            return self.getTypedRuleContext(fstripsParser.DurValueContext,0)


        def timeSpecifier(self):
            return self.getTypedRuleContext(fstripsParser.TimeSpecifierContext,0)


        def simpleDurationConstraint(self):
            return self.getTypedRuleContext(fstripsParser.SimpleDurationConstraintContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_simpleDurationConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDurationConstraint" ):
                listener.enterSimpleDurationConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDurationConstraint" ):
                listener.exitSimpleDurationConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDurationConstraint" ):
                return visitor.visitSimpleDurationConstraint(self)
            else:
                return visitor.visitChildren(self)




    def simpleDurationConstraint(self):

        localctx = fstripsParser.SimpleDurationConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_simpleDurationConstraint)
        try:
            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                self.match(fstripsParser.T__0)
                self.state = 795
                self.durOp()
                self.state = 796
                self.match(fstripsParser.T__64)
                self.state = 797
                self.durValue()
                self.state = 798
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 800
                self.match(fstripsParser.T__0)
                self.state = 801
                self.match(fstripsParser.T__33)
                self.state = 802
                self.timeSpecifier()
                self.state = 803
                self.simpleDurationConstraint()
                self.state = 804
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_durOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurOp" ):
                listener.enterDurOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurOp" ):
                listener.exitDurOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDurOp" ):
                return visitor.visitDurOp(self)
            else:
                return visitor.visitChildren(self)




    def durOp(self):

        localctx = fstripsParser.DurOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_durOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fstripsParser.T__27) | (1 << fstripsParser.T__58) | (1 << fstripsParser.T__59))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(fstripsParser.NUMBER, 0)

        def fExp(self):
            return self.getTypedRuleContext(fstripsParser.FExpContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_durValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurValue" ):
                listener.enterDurValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurValue" ):
                listener.exitDurValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDurValue" ):
                return visitor.visitDurValue(self)
            else:
                return visitor.visitChildren(self)




    def durValue(self):

        localctx = fstripsParser.DurValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_durValue)
        try:
            self.state = 812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.match(fstripsParser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.fExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def daEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.DaEffectContext)
            else:
                return self.getTypedRuleContext(fstripsParser.DaEffectContext,i)


        def timedEffect(self):
            return self.getTypedRuleContext(fstripsParser.TimedEffectContext,0)


        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)


        def daGD(self):
            return self.getTypedRuleContext(fstripsParser.DaGDContext,0)


        def assignOp(self):
            return self.getTypedRuleContext(fstripsParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(fstripsParser.FHeadContext,0)


        def fExpDA(self):
            return self.getTypedRuleContext(fstripsParser.FExpDAContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_daEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDaEffect" ):
                listener.enterDaEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDaEffect" ):
                listener.exitDaEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDaEffect" ):
                return visitor.visitDaEffect(self)
            else:
                return visitor.visitChildren(self)




    def daEffect(self):

        localctx = fstripsParser.DaEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_daEffect)
        self._la = 0 # Token type
        try:
            self.state = 844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.match(fstripsParser.T__0)
                self.state = 815
                self.match(fstripsParser.T__21)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fstripsParser.T__0:
                    self.state = 816
                    self.daEffect()
                    self.state = 821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 822
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.timedEffect()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 824
                self.match(fstripsParser.T__0)
                self.state = 825
                self.match(fstripsParser.T__26)
                self.state = 826
                self.match(fstripsParser.T__0)
                self.state = 827
                self.variableList()
                self.state = 828
                self.match(fstripsParser.T__2)
                self.state = 829
                self.daEffect()
                self.state = 830
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 832
                self.match(fstripsParser.T__0)
                self.state = 833
                self.match(fstripsParser.T__40)
                self.state = 834
                self.daGD()
                self.state = 835
                self.timedEffect()
                self.state = 836
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 838
                self.match(fstripsParser.T__0)
                self.state = 839
                self.assignOp()
                self.state = 840
                self.fHead()
                self.state = 841
                self.fExpDA()
                self.state = 842
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimedEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeSpecifier(self):
            return self.getTypedRuleContext(fstripsParser.TimeSpecifierContext,0)


        def daEffect(self):
            return self.getTypedRuleContext(fstripsParser.DaEffectContext,0)


        def fAssignDA(self):
            return self.getTypedRuleContext(fstripsParser.FAssignDAContext,0)


        def assignOp(self):
            return self.getTypedRuleContext(fstripsParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(fstripsParser.FHeadContext,0)


        def fExp(self):
            return self.getTypedRuleContext(fstripsParser.FExpContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_timedEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimedEffect" ):
                listener.enterTimedEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimedEffect" ):
                listener.exitTimedEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimedEffect" ):
                return visitor.visitTimedEffect(self)
            else:
                return visitor.visitChildren(self)




    def timedEffect(self):

        localctx = fstripsParser.TimedEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_timedEffect)
        try:
            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 846
                self.match(fstripsParser.T__0)
                self.state = 847
                self.match(fstripsParser.T__33)
                self.state = 848
                self.timeSpecifier()
                self.state = 849
                self.daEffect()
                self.state = 850
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self.match(fstripsParser.T__0)
                self.state = 853
                self.match(fstripsParser.T__33)
                self.state = 854
                self.timeSpecifier()
                self.state = 855
                self.fAssignDA()
                self.state = 856
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 858
                self.match(fstripsParser.T__0)
                self.state = 859
                self.assignOp()
                self.state = 860
                self.fHead()
                self.state = 861
                self.fExp()
                self.state = 862
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FAssignDAContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignOp(self):
            return self.getTypedRuleContext(fstripsParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(fstripsParser.FHeadContext,0)


        def fExpDA(self):
            return self.getTypedRuleContext(fstripsParser.FExpDAContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_fAssignDA

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFAssignDA" ):
                listener.enterFAssignDA(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFAssignDA" ):
                listener.exitFAssignDA(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFAssignDA" ):
                return visitor.visitFAssignDA(self)
            else:
                return visitor.visitChildren(self)




    def fAssignDA(self):

        localctx = fstripsParser.FAssignDAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_fAssignDA)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(fstripsParser.T__0)
            self.state = 867
            self.assignOp()
            self.state = 868
            self.fHead()
            self.state = 869
            self.fExpDA()
            self.state = 870
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FExpDAContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryOp(self):
            return self.getTypedRuleContext(fstripsParser.BinaryOpContext,0)


        def fExpDA(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.FExpDAContext)
            else:
                return self.getTypedRuleContext(fstripsParser.FExpDAContext,i)


        def fExp(self):
            return self.getTypedRuleContext(fstripsParser.FExpContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_fExpDA

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFExpDA" ):
                listener.enterFExpDA(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFExpDA" ):
                listener.exitFExpDA(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFExpDA" ):
                return visitor.visitFExpDA(self)
            else:
                return visitor.visitChildren(self)




    def fExpDA(self):

        localctx = fstripsParser.FExpDAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_fExpDA)
        try:
            self.state = 885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 872
                self.match(fstripsParser.T__0)
                self.state = 879
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 873
                    self.binaryOp()
                    self.state = 874
                    self.fExpDA()
                    self.state = 875
                    self.fExpDA()
                    pass

                elif la_ == 2:
                    self.state = 877
                    self.match(fstripsParser.T__11)
                    self.state = 878
                    self.fExpDA()
                    pass


                self.state = 881
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 883
                self.match(fstripsParser.T__64)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 884
                self.fExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def problemDecl(self):
            return self.getTypedRuleContext(fstripsParser.ProblemDeclContext,0)


        def problemDomain(self):
            return self.getTypedRuleContext(fstripsParser.ProblemDomainContext,0)


        def init(self):
            return self.getTypedRuleContext(fstripsParser.InitContext,0)


        def goal(self):
            return self.getTypedRuleContext(fstripsParser.GoalContext,0)


        def requireDef(self):
            return self.getTypedRuleContext(fstripsParser.RequireDefContext,0)


        def object_declaration(self):
            return self.getTypedRuleContext(fstripsParser.Object_declarationContext,0)


        def problemMeta(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.ProblemMetaContext)
            else:
                return self.getTypedRuleContext(fstripsParser.ProblemMetaContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_problem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProblem" ):
                listener.enterProblem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProblem" ):
                listener.exitProblem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProblem" ):
                return visitor.visitProblem(self)
            else:
                return visitor.visitChildren(self)




    def problem(self):

        localctx = fstripsParser.ProblemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_problem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(fstripsParser.T__0)
            self.state = 888
            self.match(fstripsParser.T__1)
            self.state = 889
            self.problemDecl()
            self.state = 890
            self.problemDomain()
            self.state = 892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 891
                self.requireDef()


            self.state = 895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 894
                self.object_declaration()


            self.state = 897
            self.init()
            self.state = 898
            self.goal()
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fstripsParser.T__0:
                self.state = 899
                self.problemMeta()
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 905
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemMetaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def probConstraints(self):
            return self.getTypedRuleContext(fstripsParser.ProbConstraintsContext,0)


        def boundsDecl(self):
            return self.getTypedRuleContext(fstripsParser.BoundsDeclContext,0)


        def metricSpec(self):
            return self.getTypedRuleContext(fstripsParser.MetricSpecContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_problemMeta

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProblemMeta" ):
                listener.enterProblemMeta(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProblemMeta" ):
                listener.exitProblemMeta(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProblemMeta" ):
                return visitor.visitProblemMeta(self)
            else:
                return visitor.visitChildren(self)




    def problemMeta(self):

        localctx = fstripsParser.ProblemMetaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_problemMeta)
        try:
            self.state = 910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.probConstraints()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 908
                self.boundsDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 909
                self.metricSpec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def getRuleIndex(self):
            return fstripsParser.RULE_problemDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProblemDecl" ):
                listener.enterProblemDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProblemDecl" ):
                listener.exitProblemDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProblemDecl" ):
                return visitor.visitProblemDecl(self)
            else:
                return visitor.visitChildren(self)




    def problemDecl(self):

        localctx = fstripsParser.ProblemDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_problemDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(fstripsParser.T__0)
            self.state = 913
            self.match(fstripsParser.T__65)
            self.state = 914
            self.match(fstripsParser.NAME)
            self.state = 915
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemDomainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def getRuleIndex(self):
            return fstripsParser.RULE_problemDomain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProblemDomain" ):
                listener.enterProblemDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProblemDomain" ):
                listener.exitProblemDomain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProblemDomain" ):
                return visitor.visitProblemDomain(self)
            else:
                return visitor.visitChildren(self)




    def problemDomain(self):

        localctx = fstripsParser.ProblemDomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_problemDomain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.match(fstripsParser.T__0)
            self.state = 918
            self.match(fstripsParser.T__66)
            self.state = 919
            self.match(fstripsParser.NAME)
            self.state = 920
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(fstripsParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_object_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_declaration" ):
                listener.enterObject_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_declaration" ):
                listener.exitObject_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_declaration" ):
                return visitor.visitObject_declaration(self)
            else:
                return visitor.visitChildren(self)




    def object_declaration(self):

        localctx = fstripsParser.Object_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_object_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.match(fstripsParser.T__0)
            self.state = 923
            self.match(fstripsParser.T__67)
            self.state = 924
            self.typedNameList()
            self.state = 925
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BoundsDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeBoundsDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.TypeBoundsDefinitionContext)
            else:
                return self.getTypedRuleContext(fstripsParser.TypeBoundsDefinitionContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_boundsDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundsDecl" ):
                listener.enterBoundsDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundsDecl" ):
                listener.exitBoundsDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundsDecl" ):
                return visitor.visitBoundsDecl(self)
            else:
                return visitor.visitChildren(self)




    def boundsDecl(self):

        localctx = fstripsParser.BoundsDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_boundsDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(fstripsParser.T__0)
            self.state = 928
            self.match(fstripsParser.T__68)
            self.state = 930 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 929
                self.typeBoundsDefinition()
                self.state = 932 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==fstripsParser.T__0):
                    break

            self.state = 934
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeBoundsDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def numericBuiltinType(self):
            return self.getTypedRuleContext(fstripsParser.NumericBuiltinTypeContext,0)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(fstripsParser.NUMBER)
            else:
                return self.getToken(fstripsParser.NUMBER, i)

        def getRuleIndex(self):
            return fstripsParser.RULE_typeBoundsDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBoundsDefinition" ):
                listener.enterTypeBoundsDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBoundsDefinition" ):
                listener.exitTypeBoundsDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeBoundsDefinition" ):
                return visitor.visitTypeBoundsDefinition(self)
            else:
                return visitor.visitChildren(self)




    def typeBoundsDefinition(self):

        localctx = fstripsParser.TypeBoundsDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_typeBoundsDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(fstripsParser.T__0)
            self.state = 937
            self.match(fstripsParser.NAME)
            self.state = 938
            self.match(fstripsParser.T__11)
            self.state = 939
            self.numericBuiltinType()
            self.state = 940
            self.match(fstripsParser.T__69)
            self.state = 941
            self.match(fstripsParser.NUMBER)
            self.state = 942
            self.match(fstripsParser.T__70)
            self.state = 943
            self.match(fstripsParser.NUMBER)
            self.state = 944
            self.match(fstripsParser.T__71)
            self.state = 945
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INIT(self):
            return self.getToken(fstripsParser.K_INIT, 0)

        def initEl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.InitElContext)
            else:
                return self.getTypedRuleContext(fstripsParser.InitElContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit" ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit" ):
                listener.exitInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit" ):
                return visitor.visitInit(self)
            else:
                return visitor.visitChildren(self)




    def init(self):

        localctx = fstripsParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_init)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(fstripsParser.T__0)
            self.state = 948
            self.match(fstripsParser.K_INIT)
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fstripsParser.T__0:
                self.state = 949
                self.initEl()
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 955
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroundTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_groundTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GroundTermNumberContext(GroundTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GroundTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(fstripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroundTermNumber" ):
                listener.enterGroundTermNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroundTermNumber" ):
                listener.exitGroundTermNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroundTermNumber" ):
                return visitor.visitGroundTermNumber(self)
            else:
                return visitor.visitChildren(self)


    class GroundTermFunctionContext(GroundTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GroundTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundFunctionTerm(self):
            return self.getTypedRuleContext(fstripsParser.GroundFunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroundTermFunction" ):
                listener.enterGroundTermFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroundTermFunction" ):
                listener.exitGroundTermFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroundTermFunction" ):
                return visitor.visitGroundTermFunction(self)
            else:
                return visitor.visitChildren(self)


    class GroundTermObjectContext(GroundTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.GroundTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroundTermObject" ):
                listener.enterGroundTermObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroundTermObject" ):
                listener.exitGroundTermObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroundTermObject" ):
                return visitor.visitGroundTermObject(self)
            else:
                return visitor.visitChildren(self)



    def groundTerm(self):

        localctx = fstripsParser.GroundTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_groundTerm)
        try:
            self.state = 960
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fstripsParser.NAME]:
                localctx = fstripsParser.GroundTermObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.match(fstripsParser.NAME)
                pass
            elif token in [fstripsParser.NUMBER]:
                localctx = fstripsParser.GroundTermNumberContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.match(fstripsParser.NUMBER)
                pass
            elif token in [fstripsParser.T__0]:
                localctx = fstripsParser.GroundTermFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 959
                self.groundFunctionTerm()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroundFunctionTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(fstripsParser.FunctionSymbolContext,0)


        def groundTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.GroundTermContext)
            else:
                return self.getTypedRuleContext(fstripsParser.GroundTermContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_groundFunctionTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroundFunctionTerm" ):
                listener.enterGroundFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroundFunctionTerm" ):
                listener.exitGroundFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroundFunctionTerm" ):
                return visitor.visitGroundFunctionTerm(self)
            else:
                return visitor.visitChildren(self)




    def groundFunctionTerm(self):

        localctx = fstripsParser.GroundFunctionTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_groundFunctionTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(fstripsParser.T__0)
            self.state = 963
            self.functionSymbol()
            self.state = 967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fstripsParser.T__0 or _la==fstripsParser.NAME or _la==fstripsParser.NUMBER:
                self.state = 964
                self.groundTerm()
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 970
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitElContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_initEl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InitLiteralContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.InitElContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nameLiteral(self):
            return self.getTypedRuleContext(fstripsParser.NameLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitLiteral" ):
                listener.enterInitLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitLiteral" ):
                listener.exitInitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitLiteral" ):
                return visitor.visitInitLiteral(self)
            else:
                return visitor.visitChildren(self)


    class InitAssignmentNumericContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.InitElContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundFunctionTerm(self):
            return self.getTypedRuleContext(fstripsParser.GroundFunctionTermContext,0)

        def NUMBER(self):
            return self.getToken(fstripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitAssignmentNumeric" ):
                listener.enterInitAssignmentNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitAssignmentNumeric" ):
                listener.exitInitAssignmentNumeric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitAssignmentNumeric" ):
                return visitor.visitInitAssignmentNumeric(self)
            else:
                return visitor.visitChildren(self)


    class InitTimedLiteralContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.InitElContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(fstripsParser.NUMBER, 0)
        def nameLiteral(self):
            return self.getTypedRuleContext(fstripsParser.NameLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitTimedLiteral" ):
                listener.enterInitTimedLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitTimedLiteral" ):
                listener.exitInitTimedLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitTimedLiteral" ):
                return visitor.visitInitTimedLiteral(self)
            else:
                return visitor.visitChildren(self)


    class InitAssignmentObjectContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.InitElContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundFunctionTerm(self):
            return self.getTypedRuleContext(fstripsParser.GroundFunctionTermContext,0)

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitAssignmentObject" ):
                listener.enterInitAssignmentObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitAssignmentObject" ):
                listener.exitInitAssignmentObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitAssignmentObject" ):
                return visitor.visitInitAssignmentObject(self)
            else:
                return visitor.visitChildren(self)



    def initEl(self):

        localctx = fstripsParser.InitElContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_initEl)
        try:
            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.InitLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.nameLiteral()
                pass

            elif la_ == 2:
                localctx = fstripsParser.InitAssignmentNumericContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 973
                self.match(fstripsParser.T__0)
                self.state = 974
                self.match(fstripsParser.T__27)
                self.state = 975
                self.groundFunctionTerm()
                self.state = 976
                self.match(fstripsParser.NUMBER)
                self.state = 977
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = fstripsParser.InitTimedLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.match(fstripsParser.T__0)
                self.state = 980
                self.match(fstripsParser.T__33)
                self.state = 981
                self.match(fstripsParser.NUMBER)
                self.state = 982
                self.nameLiteral()
                self.state = 983
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = fstripsParser.InitAssignmentObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 985
                self.match(fstripsParser.T__0)
                self.state = 986
                self.match(fstripsParser.T__27)
                self.state = 987
                self.groundFunctionTerm()
                self.state = 988
                self.match(fstripsParser.NAME)
                self.state = 989
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_nameLiteral

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InitNegativeLiteralContext(NameLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.NameLiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundAtomicFormula(self):
            return self.getTypedRuleContext(fstripsParser.GroundAtomicFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitNegativeLiteral" ):
                listener.enterInitNegativeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitNegativeLiteral" ):
                listener.exitInitNegativeLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitNegativeLiteral" ):
                return visitor.visitInitNegativeLiteral(self)
            else:
                return visitor.visitChildren(self)


    class InitPositiveLiteralContext(NameLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.NameLiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundAtomicFormula(self):
            return self.getTypedRuleContext(fstripsParser.GroundAtomicFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitPositiveLiteral" ):
                listener.enterInitPositiveLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitPositiveLiteral" ):
                listener.exitInitPositiveLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitPositiveLiteral" ):
                return visitor.visitInitPositiveLiteral(self)
            else:
                return visitor.visitChildren(self)



    def nameLiteral(self):

        localctx = fstripsParser.NameLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_nameLiteral)
        try:
            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.InitPositiveLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 993
                self.groundAtomicFormula()
                pass

            elif la_ == 2:
                localctx = fstripsParser.InitNegativeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self.match(fstripsParser.T__0)
                self.state = 995
                self.match(fstripsParser.T__23)
                self.state = 996
                self.groundAtomicFormula()
                self.state = 997
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroundAtomicFormulaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(fstripsParser.PredicateContext,0)


        def groundTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.GroundTermContext)
            else:
                return self.getTypedRuleContext(fstripsParser.GroundTermContext,i)


        def getRuleIndex(self):
            return fstripsParser.RULE_groundAtomicFormula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroundAtomicFormula" ):
                listener.enterGroundAtomicFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroundAtomicFormula" ):
                listener.exitGroundAtomicFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroundAtomicFormula" ):
                return visitor.visitGroundAtomicFormula(self)
            else:
                return visitor.visitChildren(self)




    def groundAtomicFormula(self):

        localctx = fstripsParser.GroundAtomicFormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_groundAtomicFormula)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(fstripsParser.T__0)
            self.state = 1002
            self.predicate()
            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fstripsParser.T__0 or _la==fstripsParser.NAME or _la==fstripsParser.NUMBER:
                self.state = 1003
                self.groundTerm()
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1009
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_goal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoal" ):
                listener.enterGoal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoal" ):
                listener.exitGoal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoal" ):
                return visitor.visitGoal(self)
            else:
                return visitor.visitChildren(self)




    def goal(self):

        localctx = fstripsParser.GoalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_goal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(fstripsParser.T__0)
            self.state = 1012
            self.match(fstripsParser.T__72)
            self.state = 1013
            self.goalDesc()
            self.state = 1014
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProbConstraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefConGD(self):
            return self.getTypedRuleContext(fstripsParser.PrefConGDContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_probConstraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProbConstraints" ):
                listener.enterProbConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProbConstraints" ):
                listener.exitProbConstraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProbConstraints" ):
                return visitor.visitProbConstraints(self)
            else:
                return visitor.visitChildren(self)




    def probConstraints(self):

        localctx = fstripsParser.ProbConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_probConstraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(fstripsParser.T__0)
            self.state = 1017
            self.match(fstripsParser.T__73)
            self.state = 1018
            self.prefConGD()
            self.state = 1019
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefConGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_prefConGD

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniversallyQuantifiedConstraintContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.PrefConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)

        def prefConGD(self):
            return self.getTypedRuleContext(fstripsParser.PrefConGDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniversallyQuantifiedConstraint" ):
                listener.enterUniversallyQuantifiedConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniversallyQuantifiedConstraint" ):
                listener.exitUniversallyQuantifiedConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniversallyQuantifiedConstraint" ):
                return visitor.visitUniversallyQuantifiedConstraint(self)
            else:
                return visitor.visitChildren(self)


    class PlainConstraintListContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.PrefConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.ConGDContext)
            else:
                return self.getTypedRuleContext(fstripsParser.ConGDContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlainConstraintList" ):
                listener.enterPlainConstraintList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlainConstraintList" ):
                listener.exitPlainConstraintList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlainConstraintList" ):
                return visitor.visitPlainConstraintList(self)
            else:
                return visitor.visitChildren(self)


    class ConjunctionOfConstraintsContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.PrefConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def prefConGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.PrefConGDContext)
            else:
                return self.getTypedRuleContext(fstripsParser.PrefConGDContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunctionOfConstraints" ):
                listener.enterConjunctionOfConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunctionOfConstraints" ):
                listener.exitConjunctionOfConstraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunctionOfConstraints" ):
                return visitor.visitConjunctionOfConstraints(self)
            else:
                return visitor.visitChildren(self)


    class PreferenceConstraintContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.PrefConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conGD(self):
            return self.getTypedRuleContext(fstripsParser.ConGDContext,0)

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreferenceConstraint" ):
                listener.enterPreferenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreferenceConstraint" ):
                listener.exitPreferenceConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreferenceConstraint" ):
                return visitor.visitPreferenceConstraint(self)
            else:
                return visitor.visitChildren(self)



    def prefConGD(self):

        localctx = fstripsParser.PrefConGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_prefConGD)
        self._la = 0 # Token type
        try:
            self.state = 1051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.ConjunctionOfConstraintsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.match(fstripsParser.T__0)
                self.state = 1022
                self.match(fstripsParser.T__21)
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fstripsParser.T__0:
                    self.state = 1023
                    self.prefConGD()
                    self.state = 1028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1029
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = fstripsParser.UniversallyQuantifiedConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1030
                self.match(fstripsParser.T__0)
                self.state = 1031
                self.match(fstripsParser.T__26)
                self.state = 1032
                self.match(fstripsParser.T__0)
                self.state = 1033
                self.variableList()
                self.state = 1034
                self.match(fstripsParser.T__2)
                self.state = 1035
                self.prefConGD()
                self.state = 1036
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = fstripsParser.PreferenceConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1038
                self.match(fstripsParser.T__0)
                self.state = 1039
                self.match(fstripsParser.T__32)
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fstripsParser.NAME:
                    self.state = 1040
                    self.match(fstripsParser.NAME)


                self.state = 1043
                self.conGD()
                self.state = 1044
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = fstripsParser.PlainConstraintListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1047 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1046
                        self.conGD()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1049 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MetricSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_metricSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ProblemMetricContext(MetricSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.MetricSpecContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def optimization(self):
            return self.getTypedRuleContext(fstripsParser.OptimizationContext,0)

        def metricFExp(self):
            return self.getTypedRuleContext(fstripsParser.MetricFExpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProblemMetric" ):
                listener.enterProblemMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProblemMetric" ):
                listener.exitProblemMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProblemMetric" ):
                return visitor.visitProblemMetric(self)
            else:
                return visitor.visitChildren(self)



    def metricSpec(self):

        localctx = fstripsParser.MetricSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_metricSpec)
        try:
            localctx = fstripsParser.ProblemMetricContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(fstripsParser.T__0)
            self.state = 1054
            self.match(fstripsParser.T__74)
            self.state = 1055
            self.optimization()
            self.state = 1056
            self.metricFExp()
            self.state = 1057
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptimizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_optimization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimization" ):
                listener.enterOptimization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimization" ):
                listener.exitOptimization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptimization" ):
                return visitor.visitOptimization(self)
            else:
                return visitor.visitChildren(self)




    def optimization(self):

        localctx = fstripsParser.OptimizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_optimization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            _la = self._input.LA(1)
            if not(_la==fstripsParser.T__75 or _la==fstripsParser.T__76):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MetricFExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_metricFExp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FunctionalExprMetricContext(MetricFExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.MetricFExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(fstripsParser.FunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionalExprMetric" ):
                listener.enterFunctionalExprMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionalExprMetric" ):
                listener.exitFunctionalExprMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionalExprMetric" ):
                return visitor.visitFunctionalExprMetric(self)
            else:
                return visitor.visitChildren(self)


    class CompositeMetricContext(MetricFExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.MetricFExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def terminalCost(self):
            return self.getTypedRuleContext(fstripsParser.TerminalCostContext,0)

        def stageCost(self):
            return self.getTypedRuleContext(fstripsParser.StageCostContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompositeMetric" ):
                listener.enterCompositeMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompositeMetric" ):
                listener.exitCompositeMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompositeMetric" ):
                return visitor.visitCompositeMetric(self)
            else:
                return visitor.visitChildren(self)


    class IsViolatedMetricContext(MetricFExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.MetricFExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(fstripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsViolatedMetric" ):
                listener.enterIsViolatedMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsViolatedMetric" ):
                listener.exitIsViolatedMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsViolatedMetric" ):
                return visitor.visitIsViolatedMetric(self)
            else:
                return visitor.visitChildren(self)


    class TotalTimeMetricContext(MetricFExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.MetricFExpContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTotalTimeMetric" ):
                listener.enterTotalTimeMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTotalTimeMetric" ):
                listener.exitTotalTimeMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTotalTimeMetric" ):
                return visitor.visitTotalTimeMetric(self)
            else:
                return visitor.visitChildren(self)



    def metricFExp(self):

        localctx = fstripsParser.MetricFExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_metricFExp)
        try:
            self.state = 1073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.FunctionalExprMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1061
                self.functionTerm()
                pass

            elif la_ == 2:
                localctx = fstripsParser.CompositeMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1062
                self.terminalCost()
                self.state = 1063
                self.stageCost()
                pass

            elif la_ == 3:
                localctx = fstripsParser.CompositeMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1065
                self.stageCost()
                self.state = 1066
                self.terminalCost()
                pass

            elif la_ == 4:
                localctx = fstripsParser.TotalTimeMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1068
                self.match(fstripsParser.T__77)
                pass

            elif la_ == 5:
                localctx = fstripsParser.IsViolatedMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1069
                self.match(fstripsParser.T__0)
                self.state = 1070
                self.match(fstripsParser.T__78)
                self.state = 1071
                self.match(fstripsParser.NAME)
                self.state = 1072
                self.match(fstripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TerminalCostContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTerm(self):
            return self.getTypedRuleContext(fstripsParser.FunctionTermContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_terminalCost

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminalCost" ):
                listener.enterTerminalCost(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminalCost" ):
                listener.exitTerminalCost(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerminalCost" ):
                return visitor.visitTerminalCost(self)
            else:
                return visitor.visitChildren(self)




    def terminalCost(self):

        localctx = fstripsParser.TerminalCostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_terminalCost)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.match(fstripsParser.T__0)
            self.state = 1076
            self.match(fstripsParser.T__79)
            self.state = 1077
            self.functionTerm()
            self.state = 1078
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StageCostContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTerm(self):
            return self.getTypedRuleContext(fstripsParser.FunctionTermContext,0)


        def getRuleIndex(self):
            return fstripsParser.RULE_stageCost

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStageCost" ):
                listener.enterStageCost(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStageCost" ):
                listener.exitStageCost(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStageCost" ):
                return visitor.visitStageCost(self)
            else:
                return visitor.visitChildren(self)




    def stageCost(self):

        localctx = fstripsParser.StageCostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_stageCost)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(fstripsParser.T__0)
            self.state = 1081
            self.match(fstripsParser.T__80)
            self.state = 1082
            self.functionTerm()
            self.state = 1083
            self.match(fstripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fstripsParser.RULE_conGD

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForallConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variableList(self):
            return self.getTypedRuleContext(fstripsParser.VariableListContext,0)

        def conGD(self):
            return self.getTypedRuleContext(fstripsParser.ConGDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForallConstraint" ):
                listener.enterForallConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForallConstraint" ):
                listener.exitForallConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForallConstraint" ):
                return visitor.visitForallConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AlwaysConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlwaysConstraint" ):
                listener.enterAlwaysConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlwaysConstraint" ):
                listener.exitAlwaysConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlwaysConstraint" ):
                return visitor.visitAlwaysConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AtEndConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtEndConstraint" ):
                listener.enterAtEndConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtEndConstraint" ):
                listener.exitAtEndConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtEndConstraint" ):
                return visitor.visitAtEndConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ConjunctiveConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.ConGDContext)
            else:
                return self.getTypedRuleContext(fstripsParser.ConGDContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunctiveConstraint" ):
                listener.enterConjunctiveConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunctiveConstraint" ):
                listener.exitConjunctiveConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunctiveConstraint" ):
                return visitor.visitConjunctiveConstraint(self)
            else:
                return visitor.visitChildren(self)


    class SometimeConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSometimeConstraint" ):
                listener.enterSometimeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSometimeConstraint" ):
                listener.exitSometimeConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSometimeConstraint" ):
                return visitor.visitSometimeConstraint(self)
            else:
                return visitor.visitChildren(self)


    class WithinConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(fstripsParser.NUMBER, 0)
        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithinConstraint" ):
                listener.enterWithinConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithinConstraint" ):
                listener.exitWithinConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithinConstraint" ):
                return visitor.visitWithinConstraint(self)
            else:
                return visitor.visitChildren(self)


    class HoldAfterConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(fstripsParser.NUMBER, 0)
        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHoldAfterConstraint" ):
                listener.enterHoldAfterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHoldAfterConstraint" ):
                listener.exitHoldAfterConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHoldAfterConstraint" ):
                return visitor.visitHoldAfterConstraint(self)
            else:
                return visitor.visitChildren(self)


    class SometimeBeforeConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(fstripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSometimeBeforeConstraint" ):
                listener.enterSometimeBeforeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSometimeBeforeConstraint" ):
                listener.exitSometimeBeforeConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSometimeBeforeConstraint" ):
                return visitor.visitSometimeBeforeConstraint(self)
            else:
                return visitor.visitChildren(self)


    class SometimeAfterConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(fstripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSometimeAfterConstraint" ):
                listener.enterSometimeAfterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSometimeAfterConstraint" ):
                listener.exitSometimeAfterConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSometimeAfterConstraint" ):
                return visitor.visitSometimeAfterConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ExtensionalConstraintGDContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTNAME(self):
            return self.getToken(fstripsParser.EXTNAME, 0)
        def groundFunctionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.GroundFunctionTermContext)
            else:
                return self.getTypedRuleContext(fstripsParser.GroundFunctionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionalConstraintGD" ):
                listener.enterExtensionalConstraintGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionalConstraintGD" ):
                listener.exitExtensionalConstraintGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionalConstraintGD" ):
                return visitor.visitExtensionalConstraintGD(self)
            else:
                return visitor.visitChildren(self)


    class HoldDuringConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(fstripsParser.NUMBER)
            else:
                return self.getToken(fstripsParser.NUMBER, i)
        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHoldDuringConstraint" ):
                listener.enterHoldDuringConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHoldDuringConstraint" ):
                listener.exitHoldDuringConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHoldDuringConstraint" ):
                return visitor.visitHoldDuringConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AlwaysWithinConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(fstripsParser.NUMBER, 0)
        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fstripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(fstripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlwaysWithinConstraint" ):
                listener.enterAlwaysWithinConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlwaysWithinConstraint" ):
                listener.exitAlwaysWithinConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlwaysWithinConstraint" ):
                return visitor.visitAlwaysWithinConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AlternativeAlwaysConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlternativeAlwaysConstraint" ):
                listener.enterAlternativeAlwaysConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlternativeAlwaysConstraint" ):
                listener.exitAlternativeAlwaysConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlternativeAlwaysConstraint" ):
                return visitor.visitAlternativeAlwaysConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AtMostOnceConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fstripsParser.ConGDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(fstripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtMostOnceConstraint" ):
                listener.enterAtMostOnceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtMostOnceConstraint" ):
                listener.exitAtMostOnceConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtMostOnceConstraint" ):
                return visitor.visitAtMostOnceConstraint(self)
            else:
                return visitor.visitChildren(self)



    def conGD(self):

        localctx = fstripsParser.ConGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_conGD)
        self._la = 0 # Token type
        try:
            self.state = 1171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                localctx = fstripsParser.ConjunctiveConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1085
                self.match(fstripsParser.T__0)
                self.state = 1086
                self.match(fstripsParser.T__21)
                self.state = 1088 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1087
                    self.conGD()
                    self.state = 1090 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fstripsParser.T__0):
                        break

                self.state = 1092
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = fstripsParser.ForallConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1094
                self.match(fstripsParser.T__0)
                self.state = 1095
                self.match(fstripsParser.T__26)
                self.state = 1096
                self.match(fstripsParser.T__0)
                self.state = 1097
                self.variableList()
                self.state = 1098
                self.match(fstripsParser.T__2)
                self.state = 1099
                self.conGD()
                self.state = 1100
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = fstripsParser.AtEndConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1102
                self.match(fstripsParser.T__0)
                self.state = 1103
                self.match(fstripsParser.T__33)
                self.state = 1104
                self.match(fstripsParser.T__36)
                self.state = 1105
                self.goalDesc()
                self.state = 1106
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = fstripsParser.AlwaysConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1108
                self.match(fstripsParser.T__0)
                self.state = 1109
                self.match(fstripsParser.T__81)
                self.state = 1110
                self.goalDesc()
                self.state = 1111
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 5:
                localctx = fstripsParser.SometimeConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1113
                self.match(fstripsParser.T__0)
                self.state = 1114
                self.match(fstripsParser.T__82)
                self.state = 1115
                self.goalDesc()
                self.state = 1116
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 6:
                localctx = fstripsParser.WithinConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1118
                self.match(fstripsParser.T__0)
                self.state = 1119
                self.match(fstripsParser.T__83)
                self.state = 1120
                self.match(fstripsParser.NUMBER)
                self.state = 1121
                self.goalDesc()
                self.state = 1122
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 7:
                localctx = fstripsParser.AtMostOnceConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1124
                self.match(fstripsParser.T__0)
                self.state = 1125
                self.match(fstripsParser.T__84)
                self.state = 1126
                self.goalDesc()
                self.state = 1127
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 8:
                localctx = fstripsParser.SometimeAfterConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1129
                self.match(fstripsParser.T__0)
                self.state = 1130
                self.match(fstripsParser.T__85)
                self.state = 1131
                self.goalDesc()
                self.state = 1132
                self.goalDesc()
                self.state = 1133
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 9:
                localctx = fstripsParser.SometimeBeforeConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1135
                self.match(fstripsParser.T__0)
                self.state = 1136
                self.match(fstripsParser.T__86)
                self.state = 1137
                self.goalDesc()
                self.state = 1138
                self.goalDesc()
                self.state = 1139
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 10:
                localctx = fstripsParser.AlwaysWithinConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1141
                self.match(fstripsParser.T__0)
                self.state = 1142
                self.match(fstripsParser.T__87)
                self.state = 1143
                self.match(fstripsParser.NUMBER)
                self.state = 1144
                self.goalDesc()
                self.state = 1145
                self.goalDesc()
                self.state = 1146
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 11:
                localctx = fstripsParser.HoldDuringConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1148
                self.match(fstripsParser.T__0)
                self.state = 1149
                self.match(fstripsParser.T__88)
                self.state = 1150
                self.match(fstripsParser.NUMBER)
                self.state = 1151
                self.match(fstripsParser.NUMBER)
                self.state = 1152
                self.goalDesc()
                self.state = 1153
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 12:
                localctx = fstripsParser.HoldAfterConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1155
                self.match(fstripsParser.T__0)
                self.state = 1156
                self.match(fstripsParser.T__89)
                self.state = 1157
                self.match(fstripsParser.NUMBER)
                self.state = 1158
                self.goalDesc()
                self.state = 1159
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 13:
                localctx = fstripsParser.ExtensionalConstraintGDContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1161
                self.match(fstripsParser.T__0)
                self.state = 1162
                self.match(fstripsParser.EXTNAME)
                self.state = 1164 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1163
                    self.groundFunctionTerm()
                    self.state = 1166 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fstripsParser.T__0):
                        break

                self.state = 1168
                self.match(fstripsParser.T__2)
                pass

            elif la_ == 14:
                localctx = fstripsParser.AlternativeAlwaysConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1170
                self.goalDesc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





